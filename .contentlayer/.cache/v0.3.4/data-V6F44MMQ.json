{
  "cacheItemsMap": {
    "projects/access.mdx": {
      "document": {
        "title": "@chronark/access",
        "description": "A minimal library for access control. It is designed to be used together with opaque access tokens by providing a simple interface to define roles with different access permissions and verifying requests to resources.",
        "date": "2022-11-13T00:00:00.000Z",
        "body": {
          "raw": "A minimal library for access control. It is designed to be used together with opaque access tokens by providing a simple interface to define roles with different access permissions and verifying requests to resources.\r\n\r\n- Fully typed\r\n- Zero dependencies\r\n- Serializable to store in a database\r\n\r\n## Install\r\n\r\n```sh-session\r\nnpm i @chronark/access\r\n```\r\n\r\n## Usage\r\n\r\n```ts\r\nimport { AccessControl, Role } from \"@chronark/access\";\r\n\r\n/**\r\n * Define all your resources and their access patterns\r\n *\r\n * key => resource\r\n * value => array of access types\r\n */\r\ntype Statements = {\r\n  user: [\"read\", \"write\", \"dance\"];\r\n  team: [\"read\", \"write\"];\r\n};\r\n\r\n/**\r\n * Create an access control instance and pass the Statements type to enjoy full\r\n * type safety\r\n */\r\nconst ac = new AccessControl<Statements>();\r\n\r\n/**\r\n * Now you can define one or more roles by specifying the access permissions\r\n *\r\n * This is already fully typed and typescript will let you know if you try to\r\n * use anything, that is not defined in the Statements type.\r\n */\r\nconst role = ac.newRole({\r\n  user: [\"read\", \"write\"],\r\n  team: [\"read\"],\r\n});\r\n\r\n/**\r\n * Simulate storing and retrieving the role in a database\r\n *\r\n * The idea here is, that you can store permissions alongside an API token.\r\n * Now, when you verify the token, you can also verify the access permissions.\r\n */\r\nconst serialized = role.toString();\r\n\r\n/**\r\n * Note how you can pass in the Statements type again, to get full type safety\r\n */\r\nconst recovered = Role.fromString<Statements>(serialized);\r\n\r\n/**\r\n * Validate the role by specifying the resource and the required access\r\n *\r\n * everything is fully typed\r\n */\r\nconst res = recovered.authorize({\"team\", [\"read\"]});\r\n\r\n// res.success => boolean\r\n// res.error => string | undefined provides a reason for failure\r\n```",
          "code": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var m=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var s in e)a(n,s,{get:e[s],enumerable:!0})},i=(n,e,s,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of p(e))!f.call(n,t)&&t!==s&&a(n,t,{get:()=>e[t],enumerable:!(o=u(e,t))||o.enumerable});return n};var w=(n,e,s)=>(s=n!=null?h(y(n)):{},i(e||!n||!n.__esModule?a(s,\"default\",{value:n,enumerable:!0}):s,n)),b=n=>i(a({},\"__esModule\",{value:!0}),n);var l=m((_,c)=>{c.exports=_jsx_runtime});var x={};g(x,{default:()=>S,frontmatter:()=>v});var r=w(l()),v={title:\"@chronark/access\",description:\"A minimal library for access control. It is designed to be used together with opaque access tokens by providing a simple interface to define roles with different access permissions and verifying requests to resources.\",repository:\"chronark/access\",date:\"2022-11-13\",published:!0};function d(n){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",h2:\"h2\",pre:\"pre\",code:\"code\"},n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:\"A minimal library for access control. It is designed to be used together with opaque access tokens by providing a simple interface to define roles with different access permissions and verifying requests to resources.\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Fully typed\"}),`\n`,(0,r.jsx)(e.li,{children:\"Zero dependencies\"}),`\n`,(0,r.jsx)(e.li,{children:\"Serializable to store in a database\"}),`\n`]}),`\n`,(0,r.jsx)(e.h2,{children:\"Install\"}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-sh-session\",children:`npm i @chronark/access\n`})}),`\n`,(0,r.jsx)(e.h2,{children:\"Usage\"}),`\n`,(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:\"language-ts\",children:`import { AccessControl, Role } from \"@chronark/access\";\\r\n\\r\n/**\\r\n * Define all your resources and their access patterns\\r\n *\\r\n * key => resource\\r\n * value => array of access types\\r\n */\\r\ntype Statements = {\\r\n  user: [\"read\", \"write\", \"dance\"];\\r\n  team: [\"read\", \"write\"];\\r\n};\\r\n\\r\n/**\\r\n * Create an access control instance and pass the Statements type to enjoy full\\r\n * type safety\\r\n */\\r\nconst ac = new AccessControl<Statements>();\\r\n\\r\n/**\\r\n * Now you can define one or more roles by specifying the access permissions\\r\n *\\r\n * This is already fully typed and typescript will let you know if you try to\\r\n * use anything, that is not defined in the Statements type.\\r\n */\\r\nconst role = ac.newRole({\\r\n  user: [\"read\", \"write\"],\\r\n  team: [\"read\"],\\r\n});\\r\n\\r\n/**\\r\n * Simulate storing and retrieving the role in a database\\r\n *\\r\n * The idea here is, that you can store permissions alongside an API token.\\r\n * Now, when you verify the token, you can also verify the access permissions.\\r\n */\\r\nconst serialized = role.toString();\\r\n\\r\n/**\\r\n * Note how you can pass in the Statements type again, to get full type safety\\r\n */\\r\nconst recovered = Role.fromString<Statements>(serialized);\\r\n\\r\n/**\\r\n * Validate the role by specifying the resource and the required access\\r\n *\\r\n * everything is fully typed\\r\n */\\r\nconst res = recovered.authorize({\"team\", [\"read\"]});\\r\n\\r\n// res.success => boolean\\r\n// res.error => string | undefined provides a reason for failure\n`})})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(d,n)})):d(n)}var S=k;return b(x);})();\n;return Component;"
        },
        "_id": "projects/access.mdx",
        "_raw": {
          "sourceFilePath": "projects/access.mdx",
          "sourceFileName": "access.mdx",
          "sourceFileDir": "projects",
          "contentType": "mdx",
          "flattenedPath": "projects/access"
        },
        "type": "Project",
        "slug": "access"
      },
      "documentHash": "1743359695095",
      "hasWarnings": true,
      "documentTypeName": "Project"
    },
    "projects/chronark.com.mdx": {
      "document": {
        "title": "chronark.com",
        "description": "The website you're looking at",
        "date": "2023-03-28T00:00:00.000Z",
        "body": {
          "raw": "\r\n\r\nLike so many others, I just wanted a place to collect some projects I worked on. Maybe I'll add a blog, maybe I won't. I'm not sure yet.\r\n\r\nIf you like the design, check out the Repository on GitHub.\r\n\r\n",
          "code": "var Component=(()=>{var u=Object.create;var s=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var k=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),x=(e,t)=>{for(var n in t)s(e,n,{get:t[n],enumerable:!0})},a=(e,t,n,c)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let r of d(t))!j.call(e,r)&&r!==n&&s(e,r,{get:()=>t[r],enumerable:!(c=h(t,r))||c.enumerable});return e};var y=(e,t,n)=>(n=e!=null?u(p(e)):{},a(t||!e||!e.__esModule?s(n,\"default\",{value:e,enumerable:!0}):n,e)),b=e=>a(s({},\"__esModule\",{value:!0}),e);var l=k((M,i)=>{i.exports=_jsx_runtime});var w={};x(w,{default:()=>f,frontmatter:()=>g});var o=y(l()),g={title:\"chronark.com\",description:\"The website you're looking at\",repository:\"chronark/chronark.com\",url:\"https://chronark.com\",date:new Date(16799616e5),published:!0};function m(e){let t=Object.assign({p:\"p\"},e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:\"Like so many others, I just wanted a place to collect some projects I worked on. Maybe I'll add a blog, maybe I won't. I'm not sure yet.\"}),`\n`,(0,o.jsx)(t.p,{children:\"If you like the design, check out the Repository on GitHub.\"})]})}function _(e={}){let{wrapper:t}=e.components||{};return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(m,e)})):m(e)}var f=_;return b(w);})();\n;return Component;"
        },
        "_id": "projects/chronark.com.mdx",
        "_raw": {
          "sourceFilePath": "projects/chronark.com.mdx",
          "sourceFileName": "chronark.com.mdx",
          "sourceFileDir": "projects",
          "contentType": "mdx",
          "flattenedPath": "projects/chronark.com"
        },
        "type": "Project",
        "slug": "chronark.com"
      },
      "documentHash": "1743359695096",
      "hasWarnings": true,
      "documentTypeName": "Project"
    },
    "projects/envshare.mdx": {
      "document": {
        "title": "envshare.dev",
        "description": "EnvShare is a simple tool to share environment variables securely. It uses AES-GCM to encrypt your data before sending it to the server. The encryption key never leaves your browser.",
        "date": "2023-01-16T00:00:00.000Z",
        "body": {
          "raw": "\r\nEnvShare is a simple tool to share environment variables securely. It uses\r\n**AES-GCM** to encrypt your data before sending it to the server. The encryption\r\nkey never leaves your browser.\r\n\r\n## Features\r\n\r\n- **Shareable Links:** Share your environment variables securely by sending a\r\n  link\r\n- **End-to-End Encryption:** AES-GCM encryption is used to encrypt your data\r\n  before sending it to the server\r\n- **Limit number of reads:** Limit the number of times a link can be read\r\n- **Auto Expire:** Automatically expire links and delete data after a certain\r\n  time\r\n\r\n\r\n\r\n![](https://github.com/chronark/envshare/raw/main/img/envshare.png)\r\n\r\n## Built with\r\n\r\n- [Next.js](https://nextjs.org)\r\n- [tailwindcss](https://tailwindcss.com)\r\n- Deployed on [Vercel](https://vercel.com?utm_source=envshare)\r\n- Data stored on [Upstash](https://upstash.com?utm_source=envshare)\r\n\r\n## Deploy your own\r\n\r\nDetailed instructions can be found [here](https://envshare.dev/deploy)\r\n\r\nAll you need is a Redis database on Upstash and a Vercel account. Click the\r\nbutton below to clone and deploy:\r\n\r\n[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?demo-title=EnvShare&demo-description=Simple%20Next.js%20%2B%20Upstash%20app%20to%20share%20environment%20variables%20securely%20using%20AES-GCM%20encryption.&demo-url=https%3A%2F%2Fenvshare.dev%2F&demo-image=%2F%2Fimages.ctfassets.net%2Fe5382hct74si%2F5SaFBHXp5FBFJbsTzVqIJ3%2Ff0f8382369b7642fd8103debb9025c11%2Fenvshare.png&project-name=EnvShare&repository-name=envshare&repository-url=https%3A%2F%2Fgithub.com%2Fchronark%2Fenvshare&from=templates&integration-ids=oac_V3R1GIpkoJorr6fqyiwdhl17)\r\n\r\n\r\n\r\n## Configuration\r\n\r\n### Environment Variables\r\n\r\n`ENABLE_VERCEL_ANALYTICS` Any truthy value will enable Vercel Analytics. This is turned off by default\r\n\r\n## Contributing\r\n\r\nThis repository uses `pnpm` to manage dependencies. Install it using\r\n`npm install -g pnpm`\r\n\r\nPlease run `pnpm fmt` before committing to format the code.\r\n\r\n## Docs\r\n\r\nDocs in the README are temporary and will be moved to the website soon.\r\n\r\n### API\r\n\r\n#### Store a secret\r\n\r\n**PLEASE NEVER EVER UPLOAD UNENCRYPTED SECRETS.**\r\n\r\nThis endpoint is only meant to store **already encrypted** secrets. The\r\nencrypted secrets are stored in plain text.\r\n\r\n```sh-session\r\n$ curl -XPOST -s https://envshare.dev/api/v1/secret -d \"already-encrypted-secret\"\r\n```\r\n\r\nYou can add optional headers to configure the ttl and number of reads.\r\n\r\n```sh-session\r\n$ curl -XPOST -s https://envshare.dev/api/v1/secret -d \"already-encrypted-secret\" -H \"envshare-ttl: 3600\" -H \"envshare-reads: 10\"\r\n```\r\n\r\n- Omitting the `envshare-ttl` header will set a default of 30 days. Disable the\r\n  ttl by setting it to 0. (`envshare-ttl: 0`)\r\n- Omitting the `envshare-reads` header will simply disable it and allow reading\r\n  for an unlimited number of times.\r\n\r\nThis endpoint returns a JSON response with the secret id:\r\n\r\n```json\r\n{\r\n  \"data\": {\r\n    \"id\": \"HdPbXgpvUvNk43oxSdK97u\",\r\n    \"ttl\": 86400,\r\n    \"reads\": 2,\r\n    \"expiresAt\": \"2023-01-19T20:47:28.383Z\",\r\n    \"url\": \"http://envshare.dev/api/v1/secret/HdPbXgpvUvNk43oxSdK97u\"\r\n  }\r\n}\r\n```\r\n\r\n#### Retrieve a secret\r\n\r\nYou need an id to retrieve a secret. The id is returned when you store a secret.\r\n\r\n```sh-session\r\n$ curl -s https://envshare.dev/api/v1/secret/HdPbXgpvUvNk43oxSdK97u\r\n```\r\n\r\n```json\r\n{\r\n  \"data\": {\r\n    \"secret\": \"Hello\",\r\n    \"remainingReads\": 1\r\n  }\r\n}\r\n```\r\n",
          "code": "var Component=(()=>{var c=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var t in e)s(r,t,{get:e[t],enumerable:!0})},l=(r,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!v.call(r,i)&&i!==t&&s(r,i,{get:()=>e[i],enumerable:!(a=p(e,i))||a.enumerable});return r};var b=(r,e,t)=>(t=r!=null?c(m(r)):{},l(e||!r||!r.__esModule?s(t,\"default\",{value:r,enumerable:!0}):t,r)),f=r=>l(s({},\"__esModule\",{value:!0}),r);var o=g((F,d)=>{d.exports=_jsx_runtime});var x={};y(x,{default:()=>w,frontmatter:()=>E});var n=b(o()),E={title:\"envshare.dev\",description:\"EnvShare is a simple tool to share environment variables securely. It uses AES-GCM to encrypt your data before sending it to the server. The encryption key never leaves your browser.\",date:\"2023-01-16\",url:\"https://envshare.dev\",repository:\"chronark/envshare\",published:!0};function h(r){let e=Object.assign({p:\"p\",strong:\"strong\",h2:\"h2\",ul:\"ul\",li:\"li\",img:\"img\",a:\"a\",h3:\"h3\",code:\"code\",h4:\"h4\",pre:\"pre\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[`EnvShare is a simple tool to share environment variables securely. It uses\\r\n`,(0,n.jsx)(e.strong,{children:\"AES-GCM\"}),` to encrypt your data before sending it to the server. The encryption\\r\nkey never leaves your browser.`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Features\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Shareable Links:\"}),` Share your environment variables securely by sending a\\r\nlink`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"End-to-End Encryption:\"}),` AES-GCM encryption is used to encrypt your data\\r\nbefore sending it to the server`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Limit number of reads:\"}),\" Limit the number of times a link can be read\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Auto Expire:\"}),` Automatically expire links and delete data after a certain\\r\ntime`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://github.com/chronark/envshare/raw/main/img/envshare.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.h2,{children:\"Built with\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://nextjs.org\",children:\"Next.js\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://tailwindcss.com\",children:\"tailwindcss\"})}),`\n`,(0,n.jsxs)(e.li,{children:[\"Deployed on \",(0,n.jsx)(e.a,{href:\"https://vercel.com?utm_source=envshare\",children:\"Vercel\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Data stored on \",(0,n.jsx)(e.a,{href:\"https://upstash.com?utm_source=envshare\",children:\"Upstash\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Deploy your own\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Detailed instructions can be found \",(0,n.jsx)(e.a,{href:\"https://envshare.dev/deploy\",children:\"here\"})]}),`\n`,(0,n.jsx)(e.p,{children:`All you need is a Redis database on Upstash and a Vercel account. Click the\\r\nbutton below to clone and deploy:`}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://vercel.com/new/clone?demo-title=EnvShare&demo-description=Simple%20Next.js%20%2B%20Upstash%20app%20to%20share%20environment%20variables%20securely%20using%20AES-GCM%20encryption.&demo-url=https%3A%2F%2Fenvshare.dev%2F&demo-image=%2F%2Fimages.ctfassets.net%2Fe5382hct74si%2F5SaFBHXp5FBFJbsTzVqIJ3%2Ff0f8382369b7642fd8103debb9025c11%2Fenvshare.png&project-name=EnvShare&repository-name=envshare&repository-url=https%3A%2F%2Fgithub.com%2Fchronark%2Fenvshare&from=templates&integration-ids=oac_V3R1GIpkoJorr6fqyiwdhl17\",children:(0,n.jsx)(e.img,{src:\"https://vercel.com/button\",alt:\"Deploy with Vercel\"})})}),`\n`,(0,n.jsx)(e.h2,{children:\"Configuration\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Environment Variables\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"ENABLE_VERCEL_ANALYTICS\"}),\" Any truthy value will enable Vercel Analytics. This is turned off by default\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Contributing\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This repository uses \",(0,n.jsx)(e.code,{children:\"pnpm\"}),` to manage dependencies. Install it using\\r\n`,(0,n.jsx)(e.code,{children:\"npm install -g pnpm\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Please run \",(0,n.jsx)(e.code,{children:\"pnpm fmt\"}),\" before committing to format the code.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Docs\"}),`\n`,(0,n.jsx)(e.p,{children:\"Docs in the README are temporary and will be moved to the website soon.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"API\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Store a secret\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"PLEASE NEVER EVER UPLOAD UNENCRYPTED SECRETS.\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This endpoint is only meant to store \",(0,n.jsx)(e.strong,{children:\"already encrypted\"}),` secrets. The\\r\nencrypted secrets are stored in plain text.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sh-session\",children:`$ curl -XPOST -s https://envshare.dev/api/v1/secret -d \"already-encrypted-secret\"\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"You can add optional headers to configure the ttl and number of reads.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sh-session\",children:`$ curl -XPOST -s https://envshare.dev/api/v1/secret -d \"already-encrypted-secret\" -H \"envshare-ttl: 3600\" -H \"envshare-reads: 10\"\n`})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Omitting the \",(0,n.jsx)(e.code,{children:\"envshare-ttl\"}),` header will set a default of 30 days. Disable the\\r\nttl by setting it to 0. (`,(0,n.jsx)(e.code,{children:\"envshare-ttl: 0\"}),\")\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Omitting the \",(0,n.jsx)(e.code,{children:\"envshare-reads\"}),` header will simply disable it and allow reading\\r\nfor an unlimited number of times.`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"This endpoint returns a JSON response with the secret id:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-json\",children:`{\\r\n  \"data\": {\\r\n    \"id\": \"HdPbXgpvUvNk43oxSdK97u\",\\r\n    \"ttl\": 86400,\\r\n    \"reads\": 2,\\r\n    \"expiresAt\": \"2023-01-19T20:47:28.383Z\",\\r\n    \"url\": \"http://envshare.dev/api/v1/secret/HdPbXgpvUvNk43oxSdK97u\"\\r\n  }\\r\n}\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Retrieve a secret\"}),`\n`,(0,n.jsx)(e.p,{children:\"You need an id to retrieve a secret. The id is returned when you store a secret.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sh-session\",children:`$ curl -s https://envshare.dev/api/v1/secret/HdPbXgpvUvNk43oxSdK97u\n`})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-json\",children:`{\\r\n  \"data\": {\\r\n    \"secret\": \"Hello\",\\r\n    \"remainingReads\": 1\\r\n  }\\r\n}\n`})})]})}function S(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var w=S;return f(x);})();\n;return Component;"
        },
        "_id": "projects/envshare.mdx",
        "_raw": {
          "sourceFilePath": "projects/envshare.mdx",
          "sourceFileName": "envshare.mdx",
          "sourceFileDir": "projects",
          "contentType": "mdx",
          "flattenedPath": "projects/envshare"
        },
        "type": "Project",
        "slug": "envshare"
      },
      "documentHash": "1743359695097",
      "hasWarnings": true,
      "documentTypeName": "Project"
    },
    "projects/planetfall.mdx": {
      "document": {
        "title": "planetfall.io",
        "description": "I'm building a SAAS providing global latency monitoring for your APIs and websites from edge locations around the world. Have you ever wondered how fast your API is in any part of the world? Planetfall allows you to find out and monitor it continuously.",
        "date": "2023-04-01T00:00:00.000Z",
        "body": {
          "raw": "\r\n\r\n[![](/planetfall.png)](https://planetfall.io)\r\n\r\nPlanetfall is a SaaS platform that provides global latency monitoring and synthetic monitoring for APIs. With over 60 regions to monitor from, customers can gain insights into the true performance of their API by checking latency from around the world. \r\nPlanetfall offers custom timeouts, threshold notifications, and real-time alerts for potential performance issues. Additionally, customers can create custom status pages to share with their customers, which can display availability and latency for every region. Planetfall offers a free tier that includes 100k checks per month and scales as customers grow. Overall, Planetfall helps customers stay in control of their API's performance, improve communication with their customers, and build trust.\r\n\r\n",
          "code": "var Component=(()=>{var f=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var g=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),y=(e,t)=>{for(var o in t)r(e,o,{get:t[o],enumerable:!0})},s=(e,t,o,i)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let a of d(t))!p.call(e,a)&&a!==o&&r(e,a,{get:()=>t[a],enumerable:!(i=u(t,a))||i.enumerable});return e};var w=(e,t,o)=>(o=e!=null?f(h(e)):{},s(t||!e||!e.__esModule?r(o,\"default\",{value:e,enumerable:!0}):o,e)),b=e=>s(r({},\"__esModule\",{value:!0}),e);var c=g((_,l)=>{l.exports=_jsx_runtime});var A={};y(A,{default:()=>x,frontmatter:()=>P});var n=w(c()),P={title:\"planetfall.io\",description:\"I'm building a SAAS providing global latency monitoring for your APIs and websites from edge locations around the world. Have you ever wondered how fast your API is in any part of the world? Planetfall allows you to find out and monitor it continuously.\",date:\"2023-04-01\",url:\"https://planetfall.io\",published:!0};function m(e){let t=Object.assign({p:\"p\",a:\"a\",img:\"img\"},e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:\"https://planetfall.io\",children:(0,n.jsx)(t.img,{src:\"/planetfall.png\",alt:\"\"})})}),`\n`,(0,n.jsx)(t.p,{children:`Planetfall is a SaaS platform that provides global latency monitoring and synthetic monitoring for APIs. With over 60 regions to monitor from, customers can gain insights into the true performance of their API by checking latency from around the world.\\r\nPlanetfall offers custom timeouts, threshold notifications, and real-time alerts for potential performance issues. Additionally, customers can create custom status pages to share with their customers, which can display availability and latency for every region. Planetfall offers a free tier that includes 100k checks per month and scales as customers grow. Overall, Planetfall helps customers stay in control of their API's performance, improve communication with their customers, and build trust.`})]})}function v(e={}){let{wrapper:t}=e.components||{};return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(m,e)})):m(e)}var x=v;return b(A);})();\n;return Component;"
        },
        "_id": "projects/planetfall.mdx",
        "_raw": {
          "sourceFilePath": "projects/planetfall.mdx",
          "sourceFileName": "planetfall.mdx",
          "sourceFileDir": "projects",
          "contentType": "mdx",
          "flattenedPath": "projects/planetfall"
        },
        "type": "Project",
        "slug": "planetfall"
      },
      "documentHash": "1743359695099",
      "hasWarnings": true,
      "documentTypeName": "Project"
    },
    "projects/terraform-provider-vercel.mdx": {
      "document": {
        "title": "Vercel Terraform Provider",
        "description": "A Terraform provider for Vercel. It has been deprecated it when Vercel rolled out their official provider.",
        "date": "2021-03-16T00:00:00.000Z",
        "body": {
          "raw": "\r\n\r\n\r\nBack in the day when Vercel didn't have an official Terraform provider, I wrote one. \r\nI needed to manage my Vercel projects and especially sync environment variables from different cloud providers.\r\nTerraform was great to provision some postgres databases on digital ocean, but there was no way to sync the credentials with Vercel.\r\n\r\n```hcl\r\nterraform {\r\n  required_providers {\r\n    vercel = {\r\n      source  = \"registry.terraform.io/chronark/vercel\"\r\n      version = \">=0.10.3\"\r\n    }\r\n  }\r\n}\r\n\r\nprovider \"vercel\" {\r\n  token = \"<YOUR_TOKEN>\"\r\n}\r\n\r\nresource \"vercel_project\" \"my_project\" {\r\n  name = \"project-via-terraform\"\r\n  git_repository {\r\n    type = \"github\"\r\n    repo = \"chronark/terraform-provider-vercel\"\r\n  }\r\n}\r\n```\r\n\r\nIt was a fun project and I learned a lot about Terraform and Vercel's API. \r\nIt gave me the opportunity to contribute to the Terraform ecosystem and my appreciation for the work that the Terraform team does is immense.\r\n\r\nThere have been quite a few individuals and teams that have used this provider and I am happy that it has been useful to you.\r\n\r\nNow that Vercel have stepped in, I have decided to [deprecate](https://twitter.com/chronark_/status/1517759708983177218) this one on April 23rd 2022. \r\n\r\nPlease use the [official provider](https://registry.terraform.io/providers/vercel/vercel/latest) instead.",
          "code": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var u=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var n in e)a(r,n,{get:e[n],enumerable:!0})},c=(r,e,n,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!v.call(r,o)&&o!==n&&a(r,o,{get:()=>e[o],enumerable:!(i=h(e,o))||i.enumerable});return r};var g=(r,e,n)=>(n=r!=null?p(f(r)):{},c(e||!r||!r.__esModule?a(n,\"default\",{value:r,enumerable:!0}):n,r)),w=r=>c(a({},\"__esModule\",{value:!0}),r);var d=u((T,s)=>{s.exports=_jsx_runtime});var x={};y(x,{default:()=>j,frontmatter:()=>_});var t=g(d()),_={title:\"Vercel Terraform Provider\",description:\"A Terraform provider for Vercel. It has been deprecated it when Vercel rolled out their official provider.\",date:\"2021-03-16\",repository:\"chronark/terraform-provider-vercel\",url:\"https://registry.terraform.io/providers/chronark/vercel/latest\",published:!0};function l(r){let e=Object.assign({p:\"p\",pre:\"pre\",code:\"code\",a:\"a\"},r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:`Back in the day when Vercel didn't have an official Terraform provider, I wrote one.\\r\nI needed to manage my Vercel projects and especially sync environment variables from different cloud providers.\\r\nTerraform was great to provision some postgres databases on digital ocean, but there was no way to sync the credentials with Vercel.`}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-hcl\",children:`terraform {\\r\n  required_providers {\\r\n    vercel = {\\r\n      source  = \"registry.terraform.io/chronark/vercel\"\\r\n      version = \">=0.10.3\"\\r\n    }\\r\n  }\\r\n}\\r\n\\r\nprovider \"vercel\" {\\r\n  token = \"<YOUR_TOKEN>\"\\r\n}\\r\n\\r\nresource \"vercel_project\" \"my_project\" {\\r\n  name = \"project-via-terraform\"\\r\n  git_repository {\\r\n    type = \"github\"\\r\n    repo = \"chronark/terraform-provider-vercel\"\\r\n  }\\r\n}\n`})}),`\n`,(0,t.jsx)(e.p,{children:`It was a fun project and I learned a lot about Terraform and Vercel's API.\\r\nIt gave me the opportunity to contribute to the Terraform ecosystem and my appreciation for the work that the Terraform team does is immense.`}),`\n`,(0,t.jsx)(e.p,{children:\"There have been quite a few individuals and teams that have used this provider and I am happy that it has been useful to you.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Now that Vercel have stepped in, I have decided to \",(0,t.jsx)(e.a,{href:\"https://twitter.com/chronark_/status/1517759708983177218\",children:\"deprecate\"}),\" this one on April 23rd 2022.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Please use the \",(0,t.jsx)(e.a,{href:\"https://registry.terraform.io/providers/vercel/vercel/latest\",children:\"official provider\"}),\" instead.\"]})]})}function b(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(l,r)})):l(r)}var j=b;return w(x);})();\n;return Component;"
        },
        "_id": "projects/terraform-provider-vercel.mdx",
        "_raw": {
          "sourceFilePath": "projects/terraform-provider-vercel.mdx",
          "sourceFileName": "terraform-provider-vercel.mdx",
          "sourceFileDir": "projects",
          "contentType": "mdx",
          "flattenedPath": "projects/terraform-provider-vercel"
        },
        "type": "Project",
        "slug": "terraform-provider-vercel"
      },
      "documentHash": "1743359695104",
      "hasWarnings": true,
      "documentTypeName": "Project"
    },
    "projects/unkey.mdx": {
      "document": {
        "title": "unkey.dev",
        "description": "Unkey is an open source API Key management solution. It allows you to create, manage and validate API Keys for your users. It’s built with security and speed in mind.",
        "date": "2023-07-01T00:00:00.000Z",
        "body": {
          "raw": "\r\n\r\n[![](https://unkey.dev/images/landing/app.png)](https://unkey.dev)\r\n\r\nUnkey is an open source API Key management solution. It allows you to create, manage and validate API Keys for your users. It’s built with security and speed in mind.\r\n",
          "code": "var Component=(()=>{var l=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var h=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var s in e)r(n,s,{get:e[s],enumerable:!0})},i=(n,e,s,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!g.call(n,a)&&a!==s&&r(n,a,{get:()=>e[a],enumerable:!(o=m(e,a))||o.enumerable});return n};var f=(n,e,s)=>(s=n!=null?l(y(n)):{},i(e||!n||!n.__esModule?r(s,\"default\",{value:n,enumerable:!0}):s,n)),k=n=>i(r({},\"__esModule\",{value:!0}),n);var c=h((w,u)=>{u.exports=_jsx_runtime});var v={};x(v,{default:()=>_,frontmatter:()=>I});var t=f(c()),I={title:\"unkey.dev\",description:\"Unkey is an open source API Key management solution. It allows you to create, manage and validate API Keys for your users. It\\u2019s built with security and speed in mind.\",date:\"2023-07-01\",url:\"https://unkey.dev\",published:!0,repository:\"chronark/unkey\"};function d(n){let e=Object.assign({p:\"p\",a:\"a\",img:\"img\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://unkey.dev\",children:(0,t.jsx)(e.img,{src:\"https://unkey.dev/images/landing/app.png\",alt:\"\"})})}),`\n`,(0,t.jsx)(e.p,{children:\"Unkey is an open source API Key management solution. It allows you to create, manage and validate API Keys for your users. It\\u2019s built with security and speed in mind.\"})]})}function j(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var _=j;return k(v);})();\n;return Component;"
        },
        "_id": "projects/unkey.mdx",
        "_raw": {
          "sourceFilePath": "projects/unkey.mdx",
          "sourceFileName": "unkey.mdx",
          "sourceFileDir": "projects",
          "contentType": "mdx",
          "flattenedPath": "projects/unkey"
        },
        "type": "Project",
        "slug": "unkey"
      },
      "documentHash": "1743359695107",
      "hasWarnings": true,
      "documentTypeName": "Project"
    },
    "projects/upstash-qstash-sdk.mdx": {
      "document": {
        "title": "@upstash/qstash",
        "description": "A typescript client and consumer for QStash.",
        "date": "2022-07-18T00:00:00.000Z",
        "body": {
          "raw": "\r\n\r\n@upstash/qstash is the official client and consumer for [QStash](https://chronark.com/projects/qstash).\r\n\r\nQStash is the message broker between your serverless apps. You send an HTTP\r\nrequest to QStash, that includes a destination, a payload and optional settings.\r\nWe durably store your message and will deliver it to the destination API via\r\nHTTP. In case the destination is not ready to receive the message, we will retry\r\nthe message later, to guarentee at-least-once delivery.\r\n\r\n```bash\r\nnpm install @upstash/qstash\r\n```\r\n",
          "code": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var n in e)r(t,n,{get:e[n],enumerable:!0})},i=(t,e,n,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!g.call(t,a)&&a!==n&&r(t,a,{get:()=>e[a],enumerable:!(o=p(e,a))||o.enumerable});return t};var x=(t,e,n)=>(n=t!=null?d(m(t)):{},i(e||!t||!t.__esModule?r(n,\"default\",{value:t,enumerable:!0}):n,t)),j=t=>i(r({},\"__esModule\",{value:!0}),t);var h=f((Q,c)=>{c.exports=_jsx_runtime});var v={};y(v,{default:()=>_,frontmatter:()=>b});var s=x(h()),b={title:\"@upstash/qstash\",description:\"A typescript client and consumer for QStash.\",date:\"2022-07-18\",url:\"https://upstash.com/qstash\",repository:\"upstash/sdk-qstash-ts\",published:!0};function l(t){let e=Object.assign({p:\"p\",a:\"a\",pre:\"pre\",code:\"code\"},t.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:[\"@upstash/qstash is the official client and consumer for \",(0,s.jsx)(e.a,{href:\"https://chronark.com/projects/qstash\",children:\"QStash\"}),\".\"]}),`\n`,(0,s.jsx)(e.p,{children:`QStash is the message broker between your serverless apps. You send an HTTP\\r\nrequest to QStash, that includes a destination, a payload and optional settings.\\r\nWe durably store your message and will deliver it to the destination API via\\r\nHTTP. In case the destination is not ready to receive the message, we will retry\\r\nthe message later, to guarentee at-least-once delivery.`}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:\"language-bash\",children:`npm install @upstash/qstash\n`})})]})}function q(t={}){let{wrapper:e}=t.components||{};return e?(0,s.jsx)(e,Object.assign({},t,{children:(0,s.jsx)(l,t)})):l(t)}var _=q;return j(v);})();\n;return Component;"
        },
        "_id": "projects/upstash-qstash-sdk.mdx",
        "_raw": {
          "sourceFilePath": "projects/upstash-qstash-sdk.mdx",
          "sourceFileName": "upstash-qstash-sdk.mdx",
          "sourceFileDir": "projects",
          "contentType": "mdx",
          "flattenedPath": "projects/upstash-qstash-sdk"
        },
        "type": "Project",
        "slug": "upstash-qstash-sdk"
      },
      "documentHash": "1743359695120",
      "hasWarnings": true,
      "documentTypeName": "Project"
    },
    "projects/zod-bird.mdx": {
      "document": {
        "title": "Zod Bird",
        "description": "Zodbird is an e2e typed tinybird.co client library for typescript, leveraging zod for type safety and transformations",
        "date": "2023-05-21T00:00:00.000Z",
        "body": {
          "raw": "\r\n- typesafe\r\n- handles building the url params for you\r\n- easy transformation of resulting data\r\n- built in cache directives for nextjs\r\n- built in retry logic for ratelimited requests\r\n\r\n\r\n```ts\r\nimport { Tinybird } from \"@chronark/zod-bird\";\r\nimport { z } from \"zod\";\r\n\r\nconst tb = new Tinybird({ token: \"token\" });\r\n\r\nexport const getEvents = tb.buildPipe({\r\n  pipe: \"get_events__v1\",\r\n  parameters: z.object({\r\n    tenantId: z.string(),\r\n  }),\r\n  data: z.object({\r\n    event: z.string(),\r\n    time: z.number().transform((t) => new Date(t)),\r\n  }),\r\n});\r\n\r\n\r\nconst res = await getEvents({ tenantId: \"chronark\" })\r\n\r\n// res.data = {event: string, time: Date}[]\r\n```\r\n\r\n## Install\r\n\r\n```\r\nnpm i @chronark/zod-bird\r\n```\r\n\r\n\r\n## Ingesting Data\r\n\r\n```ts\r\n// lib/tinybird.ts\r\nimport { Tinybird } from \"./client\";\r\nimport { z } from \"zod\";\r\n\r\nconst tb = new Tinybird({ token: process.env.TINYBIRD_TOKEN! });\r\n\r\nexport const publishEvent = tb.buildIngestEndpoint({\r\n  datasource: \"events__v1\",\r\n  event: z.object({\r\n    id: z.string(),\r\n    tenantId: z.string(),\r\n    channelId: z.string(),\r\n    time: z.number().int(),\r\n    event: z.string(),\r\n    content: z.string().optional().default(\"\"),\r\n    metadata: z.string().optional().default(\"\"),\r\n  }),\r\n});\r\n```\r\n\r\n```ts\r\n// somewhere.ts\r\nimport { publishEvent } from \"./lib/tinybird\";\r\n\r\nawait publishEvent({\r\n  id: \"1\",\r\n  tenantId: \"1\",\r\n  channelId: \"1\",\r\n  time: Date.now(),\r\n  event: \"test\",\r\n  content: \"test\",\r\n  metadata: JSON.stringify({ test: \"test\" }),\r\n});\r\n```\r\n\r\n\r\n\r\n## Querying Endpoints\r\n\r\n```ts\r\n// lib/tinybird.ts\r\nimport { Tinybird } from \"./client\";\r\nimport { z } from \"zod\";\r\n\r\nconst tb = new Tinybird({ token: process.env.TINYBIRD_TOKEN! });\r\n\r\nexport const getChannelActivity = tb.buildPipe({\r\n  pipe: \"get_channel_activity__v1\",\r\n  parameters: z.object({\r\n    tenantId: z.string(),\r\n    channelId: z.string().optional(),\r\n    start: z.number(),\r\n    end: z.number().optional(),\r\n    granularity: z.enum([\"1m\", \"1h\", \"1d\", \"1w\", \"1M\"]),\r\n  }),\r\n  data: z.object({\r\n    time: z.string().transform((t) => new Date(t).getTime()),\r\n    count: z\r\n      .number()\r\n      .nullable()\r\n      .optional()\r\n      .transform((v) => (typeof v === \"number\" ? v : 0)),\r\n  }),\r\n});\r\n```\r\n\r\n```ts\r\n// somewhere.ts\r\nimport { getChannelActivity } from \"./lib/tinybird\";\r\n\r\n\r\nconst res = await getChannelActivity({\r\n   tenantId: \"1\",\r\n   channelId: \"1\",\r\n   start: 123,\r\n   end: 1234,\r\n   granularity: \"1h\"\r\n})\r\n\r\n```\r\n`res` is the response from the tinybird endpoint, but now fully typed and the data has been parsed according to the schema defined in `data`.\r\n\r\n## Advanced\r\n\r\n### Caching\r\n\r\nYou can add cache directives to each pipe.\r\n\r\n\r\n#### Disable caching (useful in Next.js where everything is cached by default)\r\n\r\n```ts\r\ntb.buildPipe({\r\n  pipe: \"some_pipe__v1\",\r\n  parameters: z.object({\r\n   hello: z.string()\r\n  }),\r\n  data: z.object({\r\n    response: z.string()\r\n  }),\r\n   opts: {\r\n      cache: \"no-store\" // <-------- Add this\r\n   };\r\n});\r\n\r\n```\r\n\r\n#### Cache for 15 minutes\r\n\r\n```ts\r\n\r\ntb.buildPipe({\r\n  pipe: \"some_pipe__v1\",\r\n  parameters: z.object({\r\n   hello: z.string()\r\n  }),\r\n  data: z.object({\r\n    response: z.string()\r\n  }),\r\n   opts: {\r\n      revalidate: 900 ;// <-------- Add this\r\n    };\r\n});\r\n",
          "code": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var u=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),z=(e,n)=>{for(var t in n)a(e,t,{get:n[t],enumerable:!0})},o=(e,n,t,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of m(n))!g.call(e,i)&&i!==t&&a(e,i,{get:()=>n[i],enumerable:!(s=p(n,i))||s.enumerable});return e};var f=(e,n,t)=>(t=e!=null?h(b(e)):{},o(n||!e||!e.__esModule?a(t,\"default\",{value:e,enumerable:!0}):t,e)),y=e=>o(a({},\"__esModule\",{value:!0}),e);var c=u((x,d)=>{d.exports=_jsx_runtime});var I={};z(I,{default:()=>j,frontmatter:()=>v});var r=f(c()),v={title:\"Zod Bird\",description:\"Zodbird is an e2e typed tinybird.co client library for typescript, leveraging zod for type safety and transformations\",repository:\"chronark/zod-bird\",date:\"2023-05-21\",published:!0};function l(e){let n=Object.assign({ul:\"ul\",li:\"li\",pre:\"pre\",code:\"code\",h2:\"h2\",p:\"p\",h3:\"h3\",h4:\"h4\"},e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.ul,{children:[`\n`,(0,r.jsx)(n.li,{children:\"typesafe\"}),`\n`,(0,r.jsx)(n.li,{children:\"handles building the url params for you\"}),`\n`,(0,r.jsx)(n.li,{children:\"easy transformation of resulting data\"}),`\n`,(0,r.jsx)(n.li,{children:\"built in cache directives for nextjs\"}),`\n`,(0,r.jsx)(n.li,{children:\"built in retry logic for ratelimited requests\"}),`\n`]}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`import { Tinybird } from \"@chronark/zod-bird\";\\r\nimport { z } from \"zod\";\\r\n\\r\nconst tb = new Tinybird({ token: \"token\" });\\r\n\\r\nexport const getEvents = tb.buildPipe({\\r\n  pipe: \"get_events__v1\",\\r\n  parameters: z.object({\\r\n    tenantId: z.string(),\\r\n  }),\\r\n  data: z.object({\\r\n    event: z.string(),\\r\n    time: z.number().transform((t) => new Date(t)),\\r\n  }),\\r\n});\\r\n\\r\n\\r\nconst res = await getEvents({ tenantId: \"chronark\" })\\r\n\\r\n// res.data = {event: string, time: Date}[]\n`})}),`\n`,(0,r.jsx)(n.h2,{children:\"Install\"}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:`npm i @chronark/zod-bird\n`})}),`\n`,(0,r.jsx)(n.h2,{children:\"Ingesting Data\"}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`// lib/tinybird.ts\\r\nimport { Tinybird } from \"./client\";\\r\nimport { z } from \"zod\";\\r\n\\r\nconst tb = new Tinybird({ token: process.env.TINYBIRD_TOKEN! });\\r\n\\r\nexport const publishEvent = tb.buildIngestEndpoint({\\r\n  datasource: \"events__v1\",\\r\n  event: z.object({\\r\n    id: z.string(),\\r\n    tenantId: z.string(),\\r\n    channelId: z.string(),\\r\n    time: z.number().int(),\\r\n    event: z.string(),\\r\n    content: z.string().optional().default(\"\"),\\r\n    metadata: z.string().optional().default(\"\"),\\r\n  }),\\r\n});\n`})}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`// somewhere.ts\\r\nimport { publishEvent } from \"./lib/tinybird\";\\r\n\\r\nawait publishEvent({\\r\n  id: \"1\",\\r\n  tenantId: \"1\",\\r\n  channelId: \"1\",\\r\n  time: Date.now(),\\r\n  event: \"test\",\\r\n  content: \"test\",\\r\n  metadata: JSON.stringify({ test: \"test\" }),\\r\n});\n`})}),`\n`,(0,r.jsx)(n.h2,{children:\"Querying Endpoints\"}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`// lib/tinybird.ts\\r\nimport { Tinybird } from \"./client\";\\r\nimport { z } from \"zod\";\\r\n\\r\nconst tb = new Tinybird({ token: process.env.TINYBIRD_TOKEN! });\\r\n\\r\nexport const getChannelActivity = tb.buildPipe({\\r\n  pipe: \"get_channel_activity__v1\",\\r\n  parameters: z.object({\\r\n    tenantId: z.string(),\\r\n    channelId: z.string().optional(),\\r\n    start: z.number(),\\r\n    end: z.number().optional(),\\r\n    granularity: z.enum([\"1m\", \"1h\", \"1d\", \"1w\", \"1M\"]),\\r\n  }),\\r\n  data: z.object({\\r\n    time: z.string().transform((t) => new Date(t).getTime()),\\r\n    count: z\\r\n      .number()\\r\n      .nullable()\\r\n      .optional()\\r\n      .transform((v) => (typeof v === \"number\" ? v : 0)),\\r\n  }),\\r\n});\n`})}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`// somewhere.ts\\r\nimport { getChannelActivity } from \"./lib/tinybird\";\\r\n\\r\n\\r\nconst res = await getChannelActivity({\\r\n   tenantId: \"1\",\\r\n   channelId: \"1\",\\r\n   start: 123,\\r\n   end: 1234,\\r\n   granularity: \"1h\"\\r\n})\\r\n\n`})}),`\n`,(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:\"res\"}),\" is the response from the tinybird endpoint, but now fully typed and the data has been parsed according to the schema defined in \",(0,r.jsx)(n.code,{children:\"data\"}),\".\"]}),`\n`,(0,r.jsx)(n.h2,{children:\"Advanced\"}),`\n`,(0,r.jsx)(n.h3,{children:\"Caching\"}),`\n`,(0,r.jsx)(n.p,{children:\"You can add cache directives to each pipe.\"}),`\n`,(0,r.jsx)(n.h4,{children:\"Disable caching (useful in Next.js where everything is cached by default)\"}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`tb.buildPipe({\\r\n  pipe: \"some_pipe__v1\",\\r\n  parameters: z.object({\\r\n   hello: z.string()\\r\n  }),\\r\n  data: z.object({\\r\n    response: z.string()\\r\n  }),\\r\n   opts: {\\r\n      cache: \"no-store\" // <-------- Add this\\r\n   };\\r\n});\\r\n\n`})}),`\n`,(0,r.jsx)(n.h4,{children:\"Cache for 15 minutes\"}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`\\r\ntb.buildPipe({\\r\n  pipe: \"some_pipe__v1\",\\r\n  parameters: z.object({\\r\n   hello: z.string()\\r\n  }),\\r\n  data: z.object({\\r\n    response: z.string()\\r\n  }),\\r\n   opts: {\\r\n      revalidate: 900 ;// <-------- Add this\\r\n    };\\r\n});\n`})})]})}function _(e={}){let{wrapper:n}=e.components||{};return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(l,e)})):l(e)}var j=_;return y(I);})();\n;return Component;"
        },
        "_id": "projects/zod-bird.mdx",
        "_raw": {
          "sourceFilePath": "projects/zod-bird.mdx",
          "sourceFileName": "zod-bird.mdx",
          "sourceFileDir": "projects",
          "contentType": "mdx",
          "flattenedPath": "projects/zod-bird"
        },
        "type": "Project",
        "slug": "zod-bird"
      },
      "documentHash": "1743359695135",
      "hasWarnings": true,
      "documentTypeName": "Project"
    }
  }
}
