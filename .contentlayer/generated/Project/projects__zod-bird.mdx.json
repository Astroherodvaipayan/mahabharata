{
  "title": "Zod Bird",
  "description": "Zodbird is an e2e typed tinybird.co client library for typescript, leveraging zod for type safety and transformations",
  "date": "2023-05-21T00:00:00.000Z",
  "body": {
    "raw": "\r\n- typesafe\r\n- handles building the url params for you\r\n- easy transformation of resulting data\r\n- built in cache directives for nextjs\r\n- built in retry logic for ratelimited requests\r\n\r\n\r\n```ts\r\nimport { Tinybird } from \"@chronark/zod-bird\";\r\nimport { z } from \"zod\";\r\n\r\nconst tb = new Tinybird({ token: \"token\" });\r\n\r\nexport const getEvents = tb.buildPipe({\r\n  pipe: \"get_events__v1\",\r\n  parameters: z.object({\r\n    tenantId: z.string(),\r\n  }),\r\n  data: z.object({\r\n    event: z.string(),\r\n    time: z.number().transform((t) => new Date(t)),\r\n  }),\r\n});\r\n\r\n\r\nconst res = await getEvents({ tenantId: \"chronark\" })\r\n\r\n// res.data = {event: string, time: Date}[]\r\n```\r\n\r\n## Install\r\n\r\n```\r\nnpm i @chronark/zod-bird\r\n```\r\n\r\n\r\n## Ingesting Data\r\n\r\n```ts\r\n// lib/tinybird.ts\r\nimport { Tinybird } from \"./client\";\r\nimport { z } from \"zod\";\r\n\r\nconst tb = new Tinybird({ token: process.env.TINYBIRD_TOKEN! });\r\n\r\nexport const publishEvent = tb.buildIngestEndpoint({\r\n  datasource: \"events__v1\",\r\n  event: z.object({\r\n    id: z.string(),\r\n    tenantId: z.string(),\r\n    channelId: z.string(),\r\n    time: z.number().int(),\r\n    event: z.string(),\r\n    content: z.string().optional().default(\"\"),\r\n    metadata: z.string().optional().default(\"\"),\r\n  }),\r\n});\r\n```\r\n\r\n```ts\r\n// somewhere.ts\r\nimport { publishEvent } from \"./lib/tinybird\";\r\n\r\nawait publishEvent({\r\n  id: \"1\",\r\n  tenantId: \"1\",\r\n  channelId: \"1\",\r\n  time: Date.now(),\r\n  event: \"test\",\r\n  content: \"test\",\r\n  metadata: JSON.stringify({ test: \"test\" }),\r\n});\r\n```\r\n\r\n\r\n\r\n## Querying Endpoints\r\n\r\n```ts\r\n// lib/tinybird.ts\r\nimport { Tinybird } from \"./client\";\r\nimport { z } from \"zod\";\r\n\r\nconst tb = new Tinybird({ token: process.env.TINYBIRD_TOKEN! });\r\n\r\nexport const getChannelActivity = tb.buildPipe({\r\n  pipe: \"get_channel_activity__v1\",\r\n  parameters: z.object({\r\n    tenantId: z.string(),\r\n    channelId: z.string().optional(),\r\n    start: z.number(),\r\n    end: z.number().optional(),\r\n    granularity: z.enum([\"1m\", \"1h\", \"1d\", \"1w\", \"1M\"]),\r\n  }),\r\n  data: z.object({\r\n    time: z.string().transform((t) => new Date(t).getTime()),\r\n    count: z\r\n      .number()\r\n      .nullable()\r\n      .optional()\r\n      .transform((v) => (typeof v === \"number\" ? v : 0)),\r\n  }),\r\n});\r\n```\r\n\r\n```ts\r\n// somewhere.ts\r\nimport { getChannelActivity } from \"./lib/tinybird\";\r\n\r\n\r\nconst res = await getChannelActivity({\r\n   tenantId: \"1\",\r\n   channelId: \"1\",\r\n   start: 123,\r\n   end: 1234,\r\n   granularity: \"1h\"\r\n})\r\n\r\n```\r\n`res` is the response from the tinybird endpoint, but now fully typed and the data has been parsed according to the schema defined in `data`.\r\n\r\n## Advanced\r\n\r\n### Caching\r\n\r\nYou can add cache directives to each pipe.\r\n\r\n\r\n#### Disable caching (useful in Next.js where everything is cached by default)\r\n\r\n```ts\r\ntb.buildPipe({\r\n  pipe: \"some_pipe__v1\",\r\n  parameters: z.object({\r\n   hello: z.string()\r\n  }),\r\n  data: z.object({\r\n    response: z.string()\r\n  }),\r\n   opts: {\r\n      cache: \"no-store\" // <-------- Add this\r\n   };\r\n});\r\n\r\n```\r\n\r\n#### Cache for 15 minutes\r\n\r\n```ts\r\n\r\ntb.buildPipe({\r\n  pipe: \"some_pipe__v1\",\r\n  parameters: z.object({\r\n   hello: z.string()\r\n  }),\r\n  data: z.object({\r\n    response: z.string()\r\n  }),\r\n   opts: {\r\n      revalidate: 900 ;// <-------- Add this\r\n    };\r\n});\r\n",
    "code": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var u=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),z=(e,n)=>{for(var t in n)a(e,t,{get:n[t],enumerable:!0})},o=(e,n,t,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of m(n))!g.call(e,i)&&i!==t&&a(e,i,{get:()=>n[i],enumerable:!(s=p(n,i))||s.enumerable});return e};var f=(e,n,t)=>(t=e!=null?h(b(e)):{},o(n||!e||!e.__esModule?a(t,\"default\",{value:e,enumerable:!0}):t,e)),y=e=>o(a({},\"__esModule\",{value:!0}),e);var c=u((x,d)=>{d.exports=_jsx_runtime});var I={};z(I,{default:()=>j,frontmatter:()=>v});var r=f(c()),v={title:\"Zod Bird\",description:\"Zodbird is an e2e typed tinybird.co client library for typescript, leveraging zod for type safety and transformations\",repository:\"chronark/zod-bird\",date:\"2023-05-21\",published:!0};function l(e){let n=Object.assign({ul:\"ul\",li:\"li\",pre:\"pre\",code:\"code\",h2:\"h2\",p:\"p\",h3:\"h3\",h4:\"h4\"},e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.ul,{children:[`\n`,(0,r.jsx)(n.li,{children:\"typesafe\"}),`\n`,(0,r.jsx)(n.li,{children:\"handles building the url params for you\"}),`\n`,(0,r.jsx)(n.li,{children:\"easy transformation of resulting data\"}),`\n`,(0,r.jsx)(n.li,{children:\"built in cache directives for nextjs\"}),`\n`,(0,r.jsx)(n.li,{children:\"built in retry logic for ratelimited requests\"}),`\n`]}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`import { Tinybird } from \"@chronark/zod-bird\";\\r\nimport { z } from \"zod\";\\r\n\\r\nconst tb = new Tinybird({ token: \"token\" });\\r\n\\r\nexport const getEvents = tb.buildPipe({\\r\n  pipe: \"get_events__v1\",\\r\n  parameters: z.object({\\r\n    tenantId: z.string(),\\r\n  }),\\r\n  data: z.object({\\r\n    event: z.string(),\\r\n    time: z.number().transform((t) => new Date(t)),\\r\n  }),\\r\n});\\r\n\\r\n\\r\nconst res = await getEvents({ tenantId: \"chronark\" })\\r\n\\r\n// res.data = {event: string, time: Date}[]\n`})}),`\n`,(0,r.jsx)(n.h2,{children:\"Install\"}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:`npm i @chronark/zod-bird\n`})}),`\n`,(0,r.jsx)(n.h2,{children:\"Ingesting Data\"}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`// lib/tinybird.ts\\r\nimport { Tinybird } from \"./client\";\\r\nimport { z } from \"zod\";\\r\n\\r\nconst tb = new Tinybird({ token: process.env.TINYBIRD_TOKEN! });\\r\n\\r\nexport const publishEvent = tb.buildIngestEndpoint({\\r\n  datasource: \"events__v1\",\\r\n  event: z.object({\\r\n    id: z.string(),\\r\n    tenantId: z.string(),\\r\n    channelId: z.string(),\\r\n    time: z.number().int(),\\r\n    event: z.string(),\\r\n    content: z.string().optional().default(\"\"),\\r\n    metadata: z.string().optional().default(\"\"),\\r\n  }),\\r\n});\n`})}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`// somewhere.ts\\r\nimport { publishEvent } from \"./lib/tinybird\";\\r\n\\r\nawait publishEvent({\\r\n  id: \"1\",\\r\n  tenantId: \"1\",\\r\n  channelId: \"1\",\\r\n  time: Date.now(),\\r\n  event: \"test\",\\r\n  content: \"test\",\\r\n  metadata: JSON.stringify({ test: \"test\" }),\\r\n});\n`})}),`\n`,(0,r.jsx)(n.h2,{children:\"Querying Endpoints\"}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`// lib/tinybird.ts\\r\nimport { Tinybird } from \"./client\";\\r\nimport { z } from \"zod\";\\r\n\\r\nconst tb = new Tinybird({ token: process.env.TINYBIRD_TOKEN! });\\r\n\\r\nexport const getChannelActivity = tb.buildPipe({\\r\n  pipe: \"get_channel_activity__v1\",\\r\n  parameters: z.object({\\r\n    tenantId: z.string(),\\r\n    channelId: z.string().optional(),\\r\n    start: z.number(),\\r\n    end: z.number().optional(),\\r\n    granularity: z.enum([\"1m\", \"1h\", \"1d\", \"1w\", \"1M\"]),\\r\n  }),\\r\n  data: z.object({\\r\n    time: z.string().transform((t) => new Date(t).getTime()),\\r\n    count: z\\r\n      .number()\\r\n      .nullable()\\r\n      .optional()\\r\n      .transform((v) => (typeof v === \"number\" ? v : 0)),\\r\n  }),\\r\n});\n`})}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`// somewhere.ts\\r\nimport { getChannelActivity } from \"./lib/tinybird\";\\r\n\\r\n\\r\nconst res = await getChannelActivity({\\r\n   tenantId: \"1\",\\r\n   channelId: \"1\",\\r\n   start: 123,\\r\n   end: 1234,\\r\n   granularity: \"1h\"\\r\n})\\r\n\n`})}),`\n`,(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:\"res\"}),\" is the response from the tinybird endpoint, but now fully typed and the data has been parsed according to the schema defined in \",(0,r.jsx)(n.code,{children:\"data\"}),\".\"]}),`\n`,(0,r.jsx)(n.h2,{children:\"Advanced\"}),`\n`,(0,r.jsx)(n.h3,{children:\"Caching\"}),`\n`,(0,r.jsx)(n.p,{children:\"You can add cache directives to each pipe.\"}),`\n`,(0,r.jsx)(n.h4,{children:\"Disable caching (useful in Next.js where everything is cached by default)\"}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`tb.buildPipe({\\r\n  pipe: \"some_pipe__v1\",\\r\n  parameters: z.object({\\r\n   hello: z.string()\\r\n  }),\\r\n  data: z.object({\\r\n    response: z.string()\\r\n  }),\\r\n   opts: {\\r\n      cache: \"no-store\" // <-------- Add this\\r\n   };\\r\n});\\r\n\n`})}),`\n`,(0,r.jsx)(n.h4,{children:\"Cache for 15 minutes\"}),`\n`,(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:\"language-ts\",children:`\\r\ntb.buildPipe({\\r\n  pipe: \"some_pipe__v1\",\\r\n  parameters: z.object({\\r\n   hello: z.string()\\r\n  }),\\r\n  data: z.object({\\r\n    response: z.string()\\r\n  }),\\r\n   opts: {\\r\n      revalidate: 900 ;// <-------- Add this\\r\n    };\\r\n});\n`})})]})}function _(e={}){let{wrapper:n}=e.components||{};return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(l,e)})):l(e)}var j=_;return y(I);})();\n;return Component;"
  },
  "_id": "projects/zod-bird.mdx",
  "_raw": {
    "sourceFilePath": "projects/zod-bird.mdx",
    "sourceFileName": "zod-bird.mdx",
    "sourceFileDir": "projects",
    "contentType": "mdx",
    "flattenedPath": "projects/zod-bird"
  },
  "type": "Project",
  "slug": "zod-bird"
}