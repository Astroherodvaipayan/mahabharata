"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@upstash";
exports.ids = ["vendor-chunks/@upstash"];
exports.modules = {

/***/ "(rsc)/./node_modules/@upstash/redis/chunk-FV6JMGNF.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@upstash/redis/chunk-FV6JMGNF.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpClient: () => (/* binding */ HttpClient),\n/* harmony export */   Redis: () => (/* binding */ Redis),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   error_exports: () => (/* binding */ error_exports)\n/* harmony export */ });\n/* harmony import */ var crypto_js_enc_hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto-js/enc-hex.js */ \"(rsc)/./node_modules/crypto-js/enc-hex.js\");\n/* harmony import */ var crypto_js_enc_hex_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto_js_enc_hex_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var crypto_js_sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto-js/sha1.js */ \"(rsc)/./node_modules/crypto-js/sha1.js\");\n/* harmony import */ var crypto_js_sha1_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto_js_sha1_js__WEBPACK_IMPORTED_MODULE_1__);\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// pkg/error.ts\nvar error_exports = {};\n__export(error_exports, {\n    UpstashError: ()=>UpstashError,\n    UrlError: ()=>UrlError\n});\nvar UpstashError = class extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"UpstashError\";\n    }\n};\nvar UrlError = class extends Error {\n    constructor(url){\n        super(`Upstash Redis client was passed an invalid URL. You should pass a URL starting with https. Received: \"${url}\". `);\n        this.name = \"UrlError\";\n    }\n};\n// pkg/http.ts\nvar HttpClient = class {\n    constructor(config){\n        this.upstashSyncToken = \"\";\n        this.options = {\n            backend: config.options?.backend,\n            agent: config.agent,\n            responseEncoding: config.responseEncoding ?? \"base64\",\n            // default to base64\n            cache: config.cache,\n            signal: config.signal,\n            keepAlive: config.keepAlive ?? true\n        };\n        this.upstashSyncToken = \"\";\n        this.readYourWrites = config.readYourWrites ?? true;\n        this.baseUrl = (config.baseUrl || \"\").replace(/\\/$/, \"\");\n        const urlRegex = /^https?:\\/\\/[^\\s#$./?].\\S*$/;\n        if (this.baseUrl && !urlRegex.test(this.baseUrl)) {\n            throw new UrlError(this.baseUrl);\n        }\n        this.headers = {\n            \"Content-Type\": \"application/json\",\n            ...config.headers\n        };\n        this.hasCredentials = Boolean(this.baseUrl && this.headers.authorization.split(\" \")[1]);\n        if (this.options.responseEncoding === \"base64\") {\n            this.headers[\"Upstash-Encoding\"] = \"base64\";\n        }\n        this.retry = typeof config.retry === \"boolean\" && !config.retry ? {\n            attempts: 1,\n            backoff: ()=>0\n        } : {\n            attempts: config.retry?.retries ?? 5,\n            backoff: config.retry?.backoff ?? ((retryCount)=>Math.exp(retryCount) * 50)\n        };\n    }\n    mergeTelemetry(telemetry) {\n        this.headers = merge(this.headers, \"Upstash-Telemetry-Runtime\", telemetry.runtime);\n        this.headers = merge(this.headers, \"Upstash-Telemetry-Platform\", telemetry.platform);\n        this.headers = merge(this.headers, \"Upstash-Telemetry-Sdk\", telemetry.sdk);\n    }\n    async request(req) {\n        const requestOptions = {\n            //@ts-expect-error this should throw due to bun regression\n            cache: this.options.cache,\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(req.body),\n            keepalive: this.options.keepAlive,\n            agent: this.options.agent,\n            signal: this.options.signal,\n            /**\n       * Fastly specific\n       */ backend: this.options.backend\n        };\n        if (!this.hasCredentials) {\n            console.warn(\"[Upstash Redis] Redis client was initialized without url or token. Failed to execute command.\");\n        }\n        if (this.readYourWrites) {\n            const newHeader = this.upstashSyncToken;\n            this.headers[\"upstash-sync-token\"] = newHeader;\n        }\n        let res = null;\n        let error = null;\n        for(let i = 0; i <= this.retry.attempts; i++){\n            try {\n                res = await fetch([\n                    this.baseUrl,\n                    ...req.path ?? []\n                ].join(\"/\"), requestOptions);\n                break;\n            } catch (error_) {\n                if (this.options.signal?.aborted) {\n                    const myBlob = new Blob([\n                        JSON.stringify({\n                            result: this.options.signal.reason ?? \"Aborted\"\n                        })\n                    ]);\n                    const myOptions = {\n                        status: 200,\n                        statusText: this.options.signal.reason ?? \"Aborted\"\n                    };\n                    res = new Response(myBlob, myOptions);\n                    break;\n                }\n                error = error_;\n                await new Promise((r)=>setTimeout(r, this.retry.backoff(i)));\n            }\n        }\n        if (!res) {\n            throw error ?? new Error(\"Exhausted all retries\");\n        }\n        const body = await res.json();\n        if (!res.ok) {\n            throw new UpstashError(`${body.error}, command was: ${JSON.stringify(req.body)}`);\n        }\n        if (this.readYourWrites) {\n            const headers = res.headers;\n            this.upstashSyncToken = headers.get(\"upstash-sync-token\") ?? \"\";\n        }\n        if (this.readYourWrites) {\n            const headers = res.headers;\n            this.upstashSyncToken = headers.get(\"upstash-sync-token\") ?? \"\";\n        }\n        if (this.options.responseEncoding === \"base64\") {\n            if (Array.isArray(body)) {\n                return body.map(({ result: result2, error: error2 })=>({\n                        result: decode(result2),\n                        error: error2\n                    }));\n            }\n            const result = decode(body.result);\n            return {\n                result,\n                error: body.error\n            };\n        }\n        return body;\n    }\n};\nfunction base64decode(b64) {\n    let dec = \"\";\n    try {\n        const binString = atob(b64);\n        const size = binString.length;\n        const bytes = new Uint8Array(size);\n        for(let i = 0; i < size; i++){\n            bytes[i] = binString.charCodeAt(i);\n        }\n        dec = new TextDecoder().decode(bytes);\n    } catch  {\n        dec = b64;\n    }\n    return dec;\n}\nfunction decode(raw) {\n    let result = void 0;\n    switch(typeof raw){\n        case \"undefined\":\n            {\n                return raw;\n            }\n        case \"number\":\n            {\n                result = raw;\n                break;\n            }\n        case \"object\":\n            {\n                if (Array.isArray(raw)) {\n                    result = raw.map((v)=>typeof v === \"string\" ? base64decode(v) : Array.isArray(v) ? v.map((element)=>decode(element)) : v);\n                } else {\n                    result = null;\n                }\n                break;\n            }\n        case \"string\":\n            {\n                result = raw === \"OK\" ? \"OK\" : base64decode(raw);\n                break;\n            }\n        default:\n            {\n                break;\n            }\n    }\n    return result;\n}\nfunction merge(obj, key, value) {\n    if (!value) {\n        return obj;\n    }\n    obj[key] = obj[key] ? [\n        obj[key],\n        value\n    ].join(\",\") : value;\n    return obj;\n}\n// pkg/util.ts\nfunction parseRecursive(obj) {\n    const parsed = Array.isArray(obj) ? obj.map((o)=>{\n        try {\n            return parseRecursive(o);\n        } catch  {\n            return o;\n        }\n    }) : JSON.parse(obj);\n    if (typeof parsed === \"number\" && parsed.toString() !== obj) {\n        return obj;\n    }\n    return parsed;\n}\nfunction parseResponse(result) {\n    try {\n        return parseRecursive(result);\n    } catch  {\n        return result;\n    }\n}\nfunction deserializeScanResponse(result) {\n    return [\n        result[0],\n        ...parseResponse(result.slice(1))\n    ];\n}\n// pkg/commands/command.ts\nvar defaultSerializer = (c)=>{\n    switch(typeof c){\n        case \"string\":\n        case \"number\":\n        case \"boolean\":\n            {\n                return c;\n            }\n        default:\n            {\n                return JSON.stringify(c);\n            }\n    }\n};\nvar Command = class {\n    /**\n   * Create a new command instance.\n   *\n   * You can define a custom `deserialize` function. By default we try to deserialize as json.\n   */ constructor(command, opts){\n        this.serialize = defaultSerializer;\n        this.deserialize = opts?.automaticDeserialization === void 0 || opts.automaticDeserialization ? opts?.deserialize ?? parseResponse : (x)=>x;\n        this.command = command.map((c)=>this.serialize(c));\n        if (opts?.latencyLogging) {\n            const originalExec = this.exec.bind(this);\n            this.exec = async (client)=>{\n                const start = performance.now();\n                const result = await originalExec(client);\n                const end = performance.now();\n                const loggerResult = (end - start).toFixed(2);\n                console.log(`Latency for \\x1B[38;2;19;185;39m${this.command[0].toString().toUpperCase()}\\x1B[0m: \\x1B[38;2;0;255;255m${loggerResult} ms\\x1B[0m`);\n                return result;\n            };\n        }\n    }\n    /**\n   * Execute the command using a client.\n   */ async exec(client) {\n        const { result, error } = await client.request({\n            body: this.command,\n            upstashSyncToken: client.upstashSyncToken\n        });\n        if (error) {\n            throw new UpstashError(error);\n        }\n        if (result === void 0) {\n            throw new TypeError(\"Request did not return a result\");\n        }\n        return this.deserialize(result);\n    }\n};\n// pkg/commands/hrandfield.ts\nfunction deserialize(result) {\n    if (result.length === 0) {\n        return null;\n    }\n    const obj = {};\n    while(result.length >= 2){\n        const key = result.shift();\n        const value = result.shift();\n        try {\n            obj[key] = JSON.parse(value);\n        } catch  {\n            obj[key] = value;\n        }\n    }\n    return obj;\n}\nvar HRandFieldCommand = class extends Command {\n    constructor(cmd, opts){\n        const command = [\n            \"hrandfield\",\n            cmd[0]\n        ];\n        if (typeof cmd[1] === \"number\") {\n            command.push(cmd[1]);\n        }\n        if (cmd[2]) {\n            command.push(\"WITHVALUES\");\n        }\n        super(command, {\n            // @ts-expect-error to silence compiler\n            deserialize: cmd[2] ? (result)=>deserialize(result) : opts?.deserialize,\n            ...opts\n        });\n    }\n};\n// pkg/commands/append.ts\nvar AppendCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"append\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/bitcount.ts\nvar BitCountCommand = class extends Command {\n    constructor([key, start, end], opts){\n        const command = [\n            \"bitcount\",\n            key\n        ];\n        if (typeof start === \"number\") {\n            command.push(start);\n        }\n        if (typeof end === \"number\") {\n            command.push(end);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/bitfield.ts\nvar BitFieldCommand = class {\n    constructor(args, client, opts, execOperation = (command)=>command.exec(this.client)){\n        this.client = client;\n        this.opts = opts;\n        this.execOperation = execOperation;\n        this.command = [\n            \"bitfield\",\n            ...args\n        ];\n    }\n    chain(...args) {\n        this.command.push(...args);\n        return this;\n    }\n    get(...args) {\n        return this.chain(\"get\", ...args);\n    }\n    set(...args) {\n        return this.chain(\"set\", ...args);\n    }\n    incrby(...args) {\n        return this.chain(\"incrby\", ...args);\n    }\n    overflow(overflow) {\n        return this.chain(\"overflow\", overflow);\n    }\n    exec() {\n        const command = new Command(this.command, this.opts);\n        return this.execOperation(command);\n    }\n};\n// pkg/commands/bitop.ts\nvar BitOpCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"bitop\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/bitpos.ts\nvar BitPosCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"bitpos\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/copy.ts\nvar CopyCommand = class extends Command {\n    constructor([key, destinationKey, opts], commandOptions){\n        super([\n            \"COPY\",\n            key,\n            destinationKey,\n            ...opts?.replace ? [\n                \"REPLACE\"\n            ] : []\n        ], {\n            ...commandOptions,\n            deserialize (result) {\n                if (result > 0) {\n                    return \"COPIED\";\n                }\n                return \"NOT_COPIED\";\n            }\n        });\n    }\n};\n// pkg/commands/dbsize.ts\nvar DBSizeCommand = class extends Command {\n    constructor(opts){\n        super([\n            \"dbsize\"\n        ], opts);\n    }\n};\n// pkg/commands/decr.ts\nvar DecrCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"decr\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/decrby.ts\nvar DecrByCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"decrby\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/del.ts\nvar DelCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"del\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/echo.ts\nvar EchoCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"echo\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/eval.ts\nvar EvalCommand = class extends Command {\n    constructor([script, keys, args], opts){\n        super([\n            \"eval\",\n            script,\n            keys.length,\n            ...keys,\n            ...args ?? []\n        ], opts);\n    }\n};\n// pkg/commands/evalsha.ts\nvar EvalshaCommand = class extends Command {\n    constructor([sha, keys, args], opts){\n        super([\n            \"evalsha\",\n            sha,\n            keys.length,\n            ...keys,\n            ...args ?? []\n        ], opts);\n    }\n};\n// pkg/commands/exists.ts\nvar ExistsCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"exists\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/expire.ts\nvar ExpireCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"expire\",\n            ...cmd.filter(Boolean)\n        ], opts);\n    }\n};\n// pkg/commands/expireat.ts\nvar ExpireAtCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"expireat\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/flushall.ts\nvar FlushAllCommand = class extends Command {\n    constructor(args, opts){\n        const command = [\n            \"flushall\"\n        ];\n        if (args && args.length > 0 && args[0].async) {\n            command.push(\"async\");\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/flushdb.ts\nvar FlushDBCommand = class extends Command {\n    constructor([opts], cmdOpts){\n        const command = [\n            \"flushdb\"\n        ];\n        if (opts?.async) {\n            command.push(\"async\");\n        }\n        super(command, cmdOpts);\n    }\n};\n// pkg/commands/geo_add.ts\nvar GeoAddCommand = class extends Command {\n    constructor([key, arg1, ...arg2], opts){\n        const command = [\n            \"geoadd\",\n            key\n        ];\n        if (\"nx\" in arg1 && arg1.nx) {\n            command.push(\"nx\");\n        } else if (\"xx\" in arg1 && arg1.xx) {\n            command.push(\"xx\");\n        }\n        if (\"ch\" in arg1 && arg1.ch) {\n            command.push(\"ch\");\n        }\n        if (\"latitude\" in arg1 && arg1.latitude) {\n            command.push(arg1.longitude, arg1.latitude, arg1.member);\n        }\n        command.push(...arg2.flatMap(({ latitude, longitude, member })=>[\n                longitude,\n                latitude,\n                member\n            ]));\n        super(command, opts);\n    }\n};\n// pkg/commands/geo_dist.ts\nvar GeoDistCommand = class extends Command {\n    constructor([key, member1, member2, unit = \"M\"], opts){\n        super([\n            \"GEODIST\",\n            key,\n            member1,\n            member2,\n            unit\n        ], opts);\n    }\n};\n// pkg/commands/geo_hash.ts\nvar GeoHashCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key] = cmd;\n        const members = Array.isArray(cmd[1]) ? cmd[1] : cmd.slice(1);\n        super([\n            \"GEOHASH\",\n            key,\n            ...members\n        ], opts);\n    }\n};\n// pkg/commands/geo_pos.ts\nvar GeoPosCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key] = cmd;\n        const members = Array.isArray(cmd[1]) ? cmd[1] : cmd.slice(1);\n        super([\n            \"GEOPOS\",\n            key,\n            ...members\n        ], {\n            deserialize: (result)=>transform(result),\n            ...opts\n        });\n    }\n};\nfunction transform(result) {\n    const final = [];\n    for (const pos of result){\n        if (!pos?.[0] || !pos?.[1]) {\n            continue;\n        }\n        final.push({\n            lng: Number.parseFloat(pos[0]),\n            lat: Number.parseFloat(pos[1])\n        });\n    }\n    return final;\n}\n// pkg/commands/geo_search.ts\nvar GeoSearchCommand = class extends Command {\n    constructor([key, centerPoint, shape, order, opts], commandOptions){\n        const command = [\n            \"GEOSEARCH\",\n            key\n        ];\n        if (centerPoint.type === \"FROMMEMBER\" || centerPoint.type === \"frommember\") {\n            command.push(centerPoint.type, centerPoint.member);\n        }\n        if (centerPoint.type === \"FROMLONLAT\" || centerPoint.type === \"fromlonlat\") {\n            command.push(centerPoint.type, centerPoint.coordinate.lon, centerPoint.coordinate.lat);\n        }\n        if (shape.type === \"BYRADIUS\" || shape.type === \"byradius\") {\n            command.push(shape.type, shape.radius, shape.radiusType);\n        }\n        if (shape.type === \"BYBOX\" || shape.type === \"bybox\") {\n            command.push(shape.type, shape.rect.width, shape.rect.height, shape.rectType);\n        }\n        command.push(order);\n        if (opts?.count) {\n            command.push(\"COUNT\", opts.count.limit, ...opts.count.any ? [\n                \"ANY\"\n            ] : []);\n        }\n        const transform2 = (result)=>{\n            if (!opts?.withCoord && !opts?.withDist && !opts?.withHash) {\n                return result.map((member)=>{\n                    try {\n                        return {\n                            member: JSON.parse(member)\n                        };\n                    } catch  {\n                        return {\n                            member\n                        };\n                    }\n                });\n            }\n            return result.map((members)=>{\n                let counter = 1;\n                const obj = {};\n                try {\n                    obj.member = JSON.parse(members[0]);\n                } catch  {\n                    obj.member = members[0];\n                }\n                if (opts.withDist) {\n                    obj.dist = Number.parseFloat(members[counter++]);\n                }\n                if (opts.withHash) {\n                    obj.hash = members[counter++].toString();\n                }\n                if (opts.withCoord) {\n                    obj.coord = {\n                        long: Number.parseFloat(members[counter][0]),\n                        lat: Number.parseFloat(members[counter][1])\n                    };\n                }\n                return obj;\n            });\n        };\n        super([\n            ...command,\n            ...opts?.withCoord ? [\n                \"WITHCOORD\"\n            ] : [],\n            ...opts?.withDist ? [\n                \"WITHDIST\"\n            ] : [],\n            ...opts?.withHash ? [\n                \"WITHHASH\"\n            ] : []\n        ], {\n            deserialize: transform2,\n            ...commandOptions\n        });\n    }\n};\n// pkg/commands/geo_search_store.ts\nvar GeoSearchStoreCommand = class extends Command {\n    constructor([destination, key, centerPoint, shape, order, opts], commandOptions){\n        const command = [\n            \"GEOSEARCHSTORE\",\n            destination,\n            key\n        ];\n        if (centerPoint.type === \"FROMMEMBER\" || centerPoint.type === \"frommember\") {\n            command.push(centerPoint.type, centerPoint.member);\n        }\n        if (centerPoint.type === \"FROMLONLAT\" || centerPoint.type === \"fromlonlat\") {\n            command.push(centerPoint.type, centerPoint.coordinate.lon, centerPoint.coordinate.lat);\n        }\n        if (shape.type === \"BYRADIUS\" || shape.type === \"byradius\") {\n            command.push(shape.type, shape.radius, shape.radiusType);\n        }\n        if (shape.type === \"BYBOX\" || shape.type === \"bybox\") {\n            command.push(shape.type, shape.rect.width, shape.rect.height, shape.rectType);\n        }\n        command.push(order);\n        if (opts?.count) {\n            command.push(\"COUNT\", opts.count.limit, ...opts.count.any ? [\n                \"ANY\"\n            ] : []);\n        }\n        super([\n            ...command,\n            ...opts?.storeDist ? [\n                \"STOREDIST\"\n            ] : []\n        ], commandOptions);\n    }\n};\n// pkg/commands/get.ts\nvar GetCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"get\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/getbit.ts\nvar GetBitCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"getbit\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/getdel.ts\nvar GetDelCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"getdel\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/getrange.ts\nvar GetRangeCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"getrange\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/getset.ts\nvar GetSetCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"getset\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hdel.ts\nvar HDelCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hdel\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hexists.ts\nvar HExistsCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hexists\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hget.ts\nvar HGetCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hget\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hgetall.ts\nfunction deserialize2(result) {\n    if (result.length === 0) {\n        return null;\n    }\n    const obj = {};\n    while(result.length >= 2){\n        const key = result.shift();\n        const value = result.shift();\n        try {\n            const valueIsNumberAndNotSafeInteger = !Number.isNaN(Number(value)) && !Number.isSafeInteger(Number(value));\n            obj[key] = valueIsNumberAndNotSafeInteger ? value : JSON.parse(value);\n        } catch  {\n            obj[key] = value;\n        }\n    }\n    return obj;\n}\nvar HGetAllCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hgetall\",\n            ...cmd\n        ], {\n            deserialize: (result)=>deserialize2(result),\n            ...opts\n        });\n    }\n};\n// pkg/commands/hincrby.ts\nvar HIncrByCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hincrby\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hincrbyfloat.ts\nvar HIncrByFloatCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hincrbyfloat\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hkeys.ts\nvar HKeysCommand = class extends Command {\n    constructor([key], opts){\n        super([\n            \"hkeys\",\n            key\n        ], opts);\n    }\n};\n// pkg/commands/hlen.ts\nvar HLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hlen\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hmget.ts\nfunction deserialize3(fields, result) {\n    if (result.every((field)=>field === null)) {\n        return null;\n    }\n    const obj = {};\n    for (const [i, field] of fields.entries()){\n        try {\n            obj[field] = JSON.parse(result[i]);\n        } catch  {\n            obj[field] = result[i];\n        }\n    }\n    return obj;\n}\nvar HMGetCommand = class extends Command {\n    constructor([key, ...fields], opts){\n        super([\n            \"hmget\",\n            key,\n            ...fields\n        ], {\n            deserialize: (result)=>deserialize3(fields, result),\n            ...opts\n        });\n    }\n};\n// pkg/commands/hmset.ts\nvar HMSetCommand = class extends Command {\n    constructor([key, kv], opts){\n        super([\n            \"hmset\",\n            key,\n            ...Object.entries(kv).flatMap(([field, value])=>[\n                    field,\n                    value\n                ])\n        ], opts);\n    }\n};\n// pkg/commands/hscan.ts\nvar HScanCommand = class extends Command {\n    constructor([key, cursor, cmdOpts], opts){\n        const command = [\n            \"hscan\",\n            key,\n            cursor\n        ];\n        if (cmdOpts?.match) {\n            command.push(\"match\", cmdOpts.match);\n        }\n        if (typeof cmdOpts?.count === \"number\") {\n            command.push(\"count\", cmdOpts.count);\n        }\n        super(command, {\n            deserialize: deserializeScanResponse,\n            ...opts\n        });\n    }\n};\n// pkg/commands/hset.ts\nvar HSetCommand = class extends Command {\n    constructor([key, kv], opts){\n        super([\n            \"hset\",\n            key,\n            ...Object.entries(kv).flatMap(([field, value])=>[\n                    field,\n                    value\n                ])\n        ], opts);\n    }\n};\n// pkg/commands/hsetnx.ts\nvar HSetNXCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hsetnx\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hstrlen.ts\nvar HStrLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hstrlen\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/hvals.ts\nvar HValsCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"hvals\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/incr.ts\nvar IncrCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"incr\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/incrby.ts\nvar IncrByCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"incrby\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/incrbyfloat.ts\nvar IncrByFloatCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"incrbyfloat\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_arrappend.ts\nvar JsonArrAppendCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.ARRAPPEND\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_arrindex.ts\nvar JsonArrIndexCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.ARRINDEX\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_arrinsert.ts\nvar JsonArrInsertCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.ARRINSERT\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_arrlen.ts\nvar JsonArrLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.ARRLEN\",\n            cmd[0],\n            cmd[1] ?? \"$\"\n        ], opts);\n    }\n};\n// pkg/commands/json_arrpop.ts\nvar JsonArrPopCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.ARRPOP\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_arrtrim.ts\nvar JsonArrTrimCommand = class extends Command {\n    constructor(cmd, opts){\n        const path = cmd[1] ?? \"$\";\n        const start = cmd[2] ?? 0;\n        const stop = cmd[3] ?? 0;\n        super([\n            \"JSON.ARRTRIM\",\n            cmd[0],\n            path,\n            start,\n            stop\n        ], opts);\n    }\n};\n// pkg/commands/json_clear.ts\nvar JsonClearCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.CLEAR\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_del.ts\nvar JsonDelCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.DEL\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_forget.ts\nvar JsonForgetCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.FORGET\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_get.ts\nvar JsonGetCommand = class extends Command {\n    constructor(cmd, opts){\n        const command = [\n            \"JSON.GET\"\n        ];\n        if (typeof cmd[1] === \"string\") {\n            command.push(...cmd);\n        } else {\n            command.push(cmd[0]);\n            if (cmd[1]) {\n                if (cmd[1].indent) {\n                    command.push(\"INDENT\", cmd[1].indent);\n                }\n                if (cmd[1].newline) {\n                    command.push(\"NEWLINE\", cmd[1].newline);\n                }\n                if (cmd[1].space) {\n                    command.push(\"SPACE\", cmd[1].space);\n                }\n            }\n            command.push(...cmd.slice(2));\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/json_mget.ts\nvar JsonMGetCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.MGET\",\n            ...cmd[0],\n            cmd[1]\n        ], opts);\n    }\n};\n// pkg/commands/json_mset.ts\nvar JsonMSetCommand = class extends Command {\n    constructor(cmd, opts){\n        const command = [\n            \"JSON.MSET\"\n        ];\n        for (const c of cmd){\n            command.push(c.key, c.path, c.value);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/json_numincrby.ts\nvar JsonNumIncrByCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.NUMINCRBY\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_nummultby.ts\nvar JsonNumMultByCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.NUMMULTBY\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_objkeys.ts\nvar JsonObjKeysCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.OBJKEYS\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_objlen.ts\nvar JsonObjLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.OBJLEN\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_resp.ts\nvar JsonRespCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.RESP\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_set.ts\nvar JsonSetCommand = class extends Command {\n    constructor(cmd, opts){\n        const command = [\n            \"JSON.SET\",\n            cmd[0],\n            cmd[1],\n            cmd[2]\n        ];\n        if (cmd[3]) {\n            if (cmd[3].nx) {\n                command.push(\"NX\");\n            } else if (cmd[3].xx) {\n                command.push(\"XX\");\n            }\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/json_strappend.ts\nvar JsonStrAppendCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.STRAPPEND\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_strlen.ts\nvar JsonStrLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.STRLEN\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_toggle.ts\nvar JsonToggleCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.TOGGLE\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/json_type.ts\nvar JsonTypeCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"JSON.TYPE\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/keys.ts\nvar KeysCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"keys\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lindex.ts\nvar LIndexCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lindex\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/linsert.ts\nvar LInsertCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"linsert\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/llen.ts\nvar LLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"llen\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lmove.ts\nvar LMoveCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lmove\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lmpop.ts\nvar LmPopCommand = class extends Command {\n    constructor(cmd, opts){\n        const [numkeys, keys, direction, count] = cmd;\n        super([\n            \"LMPOP\",\n            numkeys,\n            ...keys,\n            direction,\n            ...count ? [\n                \"COUNT\",\n                count\n            ] : []\n        ], opts);\n    }\n};\n// pkg/commands/lpop.ts\nvar LPopCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lpop\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lpos.ts\nvar LPosCommand = class extends Command {\n    constructor(cmd, opts){\n        const args = [\n            \"lpos\",\n            cmd[0],\n            cmd[1]\n        ];\n        if (typeof cmd[2]?.rank === \"number\") {\n            args.push(\"rank\", cmd[2].rank);\n        }\n        if (typeof cmd[2]?.count === \"number\") {\n            args.push(\"count\", cmd[2].count);\n        }\n        if (typeof cmd[2]?.maxLen === \"number\") {\n            args.push(\"maxLen\", cmd[2].maxLen);\n        }\n        super(args, opts);\n    }\n};\n// pkg/commands/lpush.ts\nvar LPushCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lpush\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lpushx.ts\nvar LPushXCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lpushx\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lrange.ts\nvar LRangeCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lrange\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lrem.ts\nvar LRemCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lrem\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/lset.ts\nvar LSetCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"lset\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/ltrim.ts\nvar LTrimCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"ltrim\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/mget.ts\nvar MGetCommand = class extends Command {\n    constructor(cmd, opts){\n        const keys = Array.isArray(cmd[0]) ? cmd[0] : cmd;\n        super([\n            \"mget\",\n            ...keys\n        ], opts);\n    }\n};\n// pkg/commands/mset.ts\nvar MSetCommand = class extends Command {\n    constructor([kv], opts){\n        super([\n            \"mset\",\n            ...Object.entries(kv).flatMap(([key, value])=>[\n                    key,\n                    value\n                ])\n        ], opts);\n    }\n};\n// pkg/commands/msetnx.ts\nvar MSetNXCommand = class extends Command {\n    constructor([kv], opts){\n        super([\n            \"msetnx\",\n            ...Object.entries(kv).flat()\n        ], opts);\n    }\n};\n// pkg/commands/persist.ts\nvar PersistCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"persist\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/pexpire.ts\nvar PExpireCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"pexpire\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/pexpireat.ts\nvar PExpireAtCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"pexpireat\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/pfadd.ts\nvar PfAddCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"pfadd\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/pfcount.ts\nvar PfCountCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"pfcount\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/pfmerge.ts\nvar PfMergeCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"pfmerge\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/ping.ts\nvar PingCommand = class extends Command {\n    constructor(cmd, opts){\n        const command = [\n            \"ping\"\n        ];\n        if (cmd?.[0] !== void 0) {\n            command.push(cmd[0]);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/psetex.ts\nvar PSetEXCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"psetex\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/pttl.ts\nvar PTtlCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"pttl\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/publish.ts\nvar PublishCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"publish\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/randomkey.ts\nvar RandomKeyCommand = class extends Command {\n    constructor(opts){\n        super([\n            \"randomkey\"\n        ], opts);\n    }\n};\n// pkg/commands/rename.ts\nvar RenameCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"rename\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/renamenx.ts\nvar RenameNXCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"renamenx\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/rpop.ts\nvar RPopCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"rpop\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/rpush.ts\nvar RPushCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"rpush\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/rpushx.ts\nvar RPushXCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"rpushx\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sadd.ts\nvar SAddCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sadd\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/scan.ts\nvar ScanCommand = class extends Command {\n    constructor([cursor, opts], cmdOpts){\n        const command = [\n            \"scan\",\n            cursor\n        ];\n        if (opts?.match) {\n            command.push(\"match\", opts.match);\n        }\n        if (typeof opts?.count === \"number\") {\n            command.push(\"count\", opts.count);\n        }\n        if (opts?.type && opts.type.length > 0) {\n            command.push(\"type\", opts.type);\n        }\n        super(command, {\n            deserialize: deserializeScanResponse,\n            ...cmdOpts\n        });\n    }\n};\n// pkg/commands/scard.ts\nvar SCardCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"scard\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/script_exists.ts\nvar ScriptExistsCommand = class extends Command {\n    constructor(hashes, opts){\n        super([\n            \"script\",\n            \"exists\",\n            ...hashes\n        ], {\n            deserialize: (result)=>result,\n            ...opts\n        });\n    }\n};\n// pkg/commands/script_flush.ts\nvar ScriptFlushCommand = class extends Command {\n    constructor([opts], cmdOpts){\n        const cmd = [\n            \"script\",\n            \"flush\"\n        ];\n        if (opts?.sync) {\n            cmd.push(\"sync\");\n        } else if (opts?.async) {\n            cmd.push(\"async\");\n        }\n        super(cmd, cmdOpts);\n    }\n};\n// pkg/commands/script_load.ts\nvar ScriptLoadCommand = class extends Command {\n    constructor(args, opts){\n        super([\n            \"script\",\n            \"load\",\n            ...args\n        ], opts);\n    }\n};\n// pkg/commands/sdiff.ts\nvar SDiffCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sdiff\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sdiffstore.ts\nvar SDiffStoreCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sdiffstore\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/set.ts\nvar SetCommand = class extends Command {\n    constructor([key, value, opts], cmdOpts){\n        const command = [\n            \"set\",\n            key,\n            value\n        ];\n        if (opts) {\n            if (\"nx\" in opts && opts.nx) {\n                command.push(\"nx\");\n            } else if (\"xx\" in opts && opts.xx) {\n                command.push(\"xx\");\n            }\n            if (\"get\" in opts && opts.get) {\n                command.push(\"get\");\n            }\n            if (\"ex\" in opts && typeof opts.ex === \"number\") {\n                command.push(\"ex\", opts.ex);\n            } else if (\"px\" in opts && typeof opts.px === \"number\") {\n                command.push(\"px\", opts.px);\n            } else if (\"exat\" in opts && typeof opts.exat === \"number\") {\n                command.push(\"exat\", opts.exat);\n            } else if (\"pxat\" in opts && typeof opts.pxat === \"number\") {\n                command.push(\"pxat\", opts.pxat);\n            } else if (\"keepTtl\" in opts && opts.keepTtl) {\n                command.push(\"keepTtl\");\n            }\n        }\n        super(command, cmdOpts);\n    }\n};\n// pkg/commands/setbit.ts\nvar SetBitCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"setbit\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/setex.ts\nvar SetExCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"setex\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/setnx.ts\nvar SetNxCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"setnx\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/setrange.ts\nvar SetRangeCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"setrange\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sinter.ts\nvar SInterCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sinter\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sinterstore.ts\nvar SInterStoreCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sinterstore\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sismember.ts\nvar SIsMemberCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sismember\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/smembers.ts\nvar SMembersCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"smembers\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/smismember.ts\nvar SMIsMemberCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"smismember\",\n            cmd[0],\n            ...cmd[1]\n        ], opts);\n    }\n};\n// pkg/commands/smove.ts\nvar SMoveCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"smove\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/spop.ts\nvar SPopCommand = class extends Command {\n    constructor([key, count], opts){\n        const command = [\n            \"spop\",\n            key\n        ];\n        if (typeof count === \"number\") {\n            command.push(count);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/srandmember.ts\nvar SRandMemberCommand = class extends Command {\n    constructor([key, count], opts){\n        const command = [\n            \"srandmember\",\n            key\n        ];\n        if (typeof count === \"number\") {\n            command.push(count);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/srem.ts\nvar SRemCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"srem\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sscan.ts\nvar SScanCommand = class extends Command {\n    constructor([key, cursor, opts], cmdOpts){\n        const command = [\n            \"sscan\",\n            key,\n            cursor\n        ];\n        if (opts?.match) {\n            command.push(\"match\", opts.match);\n        }\n        if (typeof opts?.count === \"number\") {\n            command.push(\"count\", opts.count);\n        }\n        super(command, {\n            deserialize: deserializeScanResponse,\n            ...cmdOpts\n        });\n    }\n};\n// pkg/commands/strlen.ts\nvar StrLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"strlen\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sunion.ts\nvar SUnionCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sunion\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/sunionstore.ts\nvar SUnionStoreCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"sunionstore\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/time.ts\nvar TimeCommand = class extends Command {\n    constructor(opts){\n        super([\n            \"time\"\n        ], opts);\n    }\n};\n// pkg/commands/touch.ts\nvar TouchCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"touch\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/ttl.ts\nvar TtlCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"ttl\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/type.ts\nvar TypeCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"type\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/unlink.ts\nvar UnlinkCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"unlink\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/xack.ts\nvar XAckCommand = class extends Command {\n    constructor([key, group, id], opts){\n        const ids = Array.isArray(id) ? [\n            ...id\n        ] : [\n            id\n        ];\n        super([\n            \"XACK\",\n            key,\n            group,\n            ...ids\n        ], opts);\n    }\n};\n// pkg/commands/xadd.ts\nvar XAddCommand = class extends Command {\n    constructor([key, id, entries, opts], commandOptions){\n        const command = [\n            \"XADD\",\n            key\n        ];\n        if (opts) {\n            if (opts.nomkStream) {\n                command.push(\"NOMKSTREAM\");\n            }\n            if (opts.trim) {\n                command.push(opts.trim.type, opts.trim.comparison, opts.trim.threshold);\n                if (opts.trim.limit !== void 0) {\n                    command.push(\"LIMIT\", opts.trim.limit);\n                }\n            }\n        }\n        command.push(id);\n        for (const [k, v] of Object.entries(entries)){\n            command.push(k, v);\n        }\n        super(command, commandOptions);\n    }\n};\n// pkg/commands/xautoclaim.ts\nvar XAutoClaim = class extends Command {\n    constructor([key, group, consumer, minIdleTime, start, options], opts){\n        const commands = [];\n        if (options?.count) {\n            commands.push(\"COUNT\", options.count);\n        }\n        if (options?.justId) {\n            commands.push(\"JUSTID\");\n        }\n        super([\n            \"XAUTOCLAIM\",\n            key,\n            group,\n            consumer,\n            minIdleTime,\n            start,\n            ...commands\n        ], opts);\n    }\n};\n// pkg/commands/xclaim.ts\nvar XClaimCommand = class extends Command {\n    constructor([key, group, consumer, minIdleTime, id, options], opts){\n        const ids = Array.isArray(id) ? [\n            ...id\n        ] : [\n            id\n        ];\n        const commands = [];\n        if (options?.idleMS) {\n            commands.push(\"IDLE\", options.idleMS);\n        }\n        if (options?.idleMS) {\n            commands.push(\"TIME\", options.timeMS);\n        }\n        if (options?.retryCount) {\n            commands.push(\"RETRYCOUNT\", options.retryCount);\n        }\n        if (options?.force) {\n            commands.push(\"FORCE\");\n        }\n        if (options?.justId) {\n            commands.push(\"JUSTID\");\n        }\n        if (options?.lastId) {\n            commands.push(\"LASTID\", options.lastId);\n        }\n        super([\n            \"XCLAIM\",\n            key,\n            group,\n            consumer,\n            minIdleTime,\n            ...ids,\n            ...commands\n        ], opts);\n    }\n};\n// pkg/commands/xdel.ts\nvar XDelCommand = class extends Command {\n    constructor([key, ids], opts){\n        const cmds = Array.isArray(ids) ? [\n            ...ids\n        ] : [\n            ids\n        ];\n        super([\n            \"XDEL\",\n            key,\n            ...cmds\n        ], opts);\n    }\n};\n// pkg/commands/xgroup.ts\nvar XGroupCommand = class extends Command {\n    constructor([key, opts], commandOptions){\n        const command = [\n            \"XGROUP\"\n        ];\n        switch(opts.type){\n            case \"CREATE\":\n                {\n                    command.push(\"CREATE\", key, opts.group, opts.id);\n                    if (opts.options) {\n                        if (opts.options.MKSTREAM) {\n                            command.push(\"MKSTREAM\");\n                        }\n                        if (opts.options.ENTRIESREAD !== void 0) {\n                            command.push(\"ENTRIESREAD\", opts.options.ENTRIESREAD.toString());\n                        }\n                    }\n                    break;\n                }\n            case \"CREATECONSUMER\":\n                {\n                    command.push(\"CREATECONSUMER\", key, opts.group, opts.consumer);\n                    break;\n                }\n            case \"DELCONSUMER\":\n                {\n                    command.push(\"DELCONSUMER\", key, opts.group, opts.consumer);\n                    break;\n                }\n            case \"DESTROY\":\n                {\n                    command.push(\"DESTROY\", key, opts.group);\n                    break;\n                }\n            case \"SETID\":\n                {\n                    command.push(\"SETID\", key, opts.group, opts.id);\n                    if (opts.options?.ENTRIESREAD !== void 0) {\n                        command.push(\"ENTRIESREAD\", opts.options.ENTRIESREAD.toString());\n                    }\n                    break;\n                }\n            default:\n                {\n                    throw new Error(\"Invalid XGROUP\");\n                }\n        }\n        super(command, commandOptions);\n    }\n};\n// pkg/commands/xinfo.ts\nvar XInfoCommand = class extends Command {\n    constructor([key, options], opts){\n        const cmds = [];\n        if (options.type === \"CONSUMERS\") {\n            cmds.push(\"CONSUMERS\", key, options.group);\n        } else {\n            cmds.push(\"GROUPS\", key);\n        }\n        super([\n            \"XINFO\",\n            ...cmds\n        ], opts);\n    }\n};\n// pkg/commands/xlen.ts\nvar XLenCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"XLEN\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/xpending.ts\nvar XPendingCommand = class extends Command {\n    constructor([key, group, start, end, count, options], opts){\n        const consumers = options?.consumer === void 0 ? [] : Array.isArray(options.consumer) ? [\n            ...options.consumer\n        ] : [\n            options.consumer\n        ];\n        super([\n            \"XPENDING\",\n            key,\n            group,\n            ...options?.idleTime ? [\n                \"IDLE\",\n                options.idleTime\n            ] : [],\n            start,\n            end,\n            count,\n            ...consumers\n        ], opts);\n    }\n};\n// pkg/commands/xrange.ts\nfunction deserialize4(result) {\n    const obj = {};\n    for (const e of result){\n        while(e.length >= 2){\n            const streamId = e.shift();\n            const entries = e.shift();\n            if (!(streamId in obj)) {\n                obj[streamId] = {};\n            }\n            while(entries.length >= 2){\n                const field = entries.shift();\n                const value = entries.shift();\n                try {\n                    obj[streamId][field] = JSON.parse(value);\n                } catch  {\n                    obj[streamId][field] = value;\n                }\n            }\n        }\n    }\n    return obj;\n}\nvar XRangeCommand = class extends Command {\n    constructor([key, start, end, count], opts){\n        const command = [\n            \"XRANGE\",\n            key,\n            start,\n            end\n        ];\n        if (typeof count === \"number\") {\n            command.push(\"COUNT\", count);\n        }\n        super(command, {\n            deserialize: (result)=>deserialize4(result),\n            ...opts\n        });\n    }\n};\n// pkg/commands/xread.ts\nvar UNBALANCED_XREAD_ERR = \"ERR Unbalanced XREAD list of streams: for each stream key an ID or '$' must be specified\";\nvar XReadCommand = class extends Command {\n    constructor([key, id, options], opts){\n        if (Array.isArray(key) && Array.isArray(id) && key.length !== id.length) {\n            throw new Error(UNBALANCED_XREAD_ERR);\n        }\n        const commands = [];\n        if (typeof options?.count === \"number\") {\n            commands.push(\"COUNT\", options.count);\n        }\n        if (typeof options?.blockMS === \"number\") {\n            commands.push(\"BLOCK\", options.blockMS);\n        }\n        commands.push(\"STREAMS\", ...Array.isArray(key) ? [\n            ...key\n        ] : [\n            key\n        ], ...Array.isArray(id) ? [\n            ...id\n        ] : [\n            id\n        ]);\n        super([\n            \"XREAD\",\n            ...commands\n        ], opts);\n    }\n};\n// pkg/commands/xreadgroup.ts\nvar UNBALANCED_XREADGROUP_ERR = \"ERR Unbalanced XREADGROUP list of streams: for each stream key an ID or '$' must be specified\";\nvar XReadGroupCommand = class extends Command {\n    constructor([group, consumer, key, id, options], opts){\n        if (Array.isArray(key) && Array.isArray(id) && key.length !== id.length) {\n            throw new Error(UNBALANCED_XREADGROUP_ERR);\n        }\n        const commands = [];\n        if (typeof options?.count === \"number\") {\n            commands.push(\"COUNT\", options.count);\n        }\n        if (typeof options?.blockMS === \"number\") {\n            commands.push(\"BLOCK\", options.blockMS);\n        }\n        if (typeof options?.NOACK === \"boolean\" && options.NOACK) {\n            commands.push(\"NOACK\");\n        }\n        commands.push(\"STREAMS\", ...Array.isArray(key) ? [\n            ...key\n        ] : [\n            key\n        ], ...Array.isArray(id) ? [\n            ...id\n        ] : [\n            id\n        ]);\n        super([\n            \"XREADGROUP\",\n            \"GROUP\",\n            group,\n            consumer,\n            ...commands\n        ], opts);\n    }\n};\n// pkg/commands/xrevrange.ts\nvar XRevRangeCommand = class extends Command {\n    constructor([key, end, start, count], opts){\n        const command = [\n            \"XREVRANGE\",\n            key,\n            end,\n            start\n        ];\n        if (typeof count === \"number\") {\n            command.push(\"COUNT\", count);\n        }\n        super(command, {\n            deserialize: (result)=>deserialize5(result),\n            ...opts\n        });\n    }\n};\nfunction deserialize5(result) {\n    const obj = {};\n    for (const e of result){\n        while(e.length >= 2){\n            const streamId = e.shift();\n            const entries = e.shift();\n            if (!(streamId in obj)) {\n                obj[streamId] = {};\n            }\n            while(entries.length >= 2){\n                const field = entries.shift();\n                const value = entries.shift();\n                try {\n                    obj[streamId][field] = JSON.parse(value);\n                } catch  {\n                    obj[streamId][field] = value;\n                }\n            }\n        }\n    }\n    return obj;\n}\n// pkg/commands/xtrim.ts\nvar XTrimCommand = class extends Command {\n    constructor([key, options], opts){\n        const { limit, strategy, threshold, exactness = \"~\" } = options;\n        super([\n            \"XTRIM\",\n            key,\n            strategy,\n            exactness,\n            threshold,\n            ...limit ? [\n                \"LIMIT\",\n                limit\n            ] : []\n        ], opts);\n    }\n};\n// pkg/commands/zadd.ts\nvar ZAddCommand = class extends Command {\n    constructor([key, arg1, ...arg2], opts){\n        const command = [\n            \"zadd\",\n            key\n        ];\n        if (\"nx\" in arg1 && arg1.nx) {\n            command.push(\"nx\");\n        } else if (\"xx\" in arg1 && arg1.xx) {\n            command.push(\"xx\");\n        }\n        if (\"ch\" in arg1 && arg1.ch) {\n            command.push(\"ch\");\n        }\n        if (\"incr\" in arg1 && arg1.incr) {\n            command.push(\"incr\");\n        }\n        if (\"lt\" in arg1 && arg1.lt) {\n            command.push(\"lt\");\n        } else if (\"gt\" in arg1 && arg1.gt) {\n            command.push(\"gt\");\n        }\n        if (\"score\" in arg1 && \"member\" in arg1) {\n            command.push(arg1.score, arg1.member);\n        }\n        command.push(...arg2.flatMap(({ score, member })=>[\n                score,\n                member\n            ]));\n        super(command, opts);\n    }\n};\n// pkg/commands/zcard.ts\nvar ZCardCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zcard\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zcount.ts\nvar ZCountCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zcount\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zincrby.ts\nvar ZIncrByCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zincrby\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zinterstore.ts\nvar ZInterStoreCommand = class extends Command {\n    constructor([destination, numKeys, keyOrKeys, opts], cmdOpts){\n        const command = [\n            \"zinterstore\",\n            destination,\n            numKeys\n        ];\n        if (Array.isArray(keyOrKeys)) {\n            command.push(...keyOrKeys);\n        } else {\n            command.push(keyOrKeys);\n        }\n        if (opts) {\n            if (\"weights\" in opts && opts.weights) {\n                command.push(\"weights\", ...opts.weights);\n            } else if (\"weight\" in opts && typeof opts.weight === \"number\") {\n                command.push(\"weights\", opts.weight);\n            }\n            if (\"aggregate\" in opts) {\n                command.push(\"aggregate\", opts.aggregate);\n            }\n        }\n        super(command, cmdOpts);\n    }\n};\n// pkg/commands/zlexcount.ts\nvar ZLexCountCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zlexcount\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zpopmax.ts\nvar ZPopMaxCommand = class extends Command {\n    constructor([key, count], opts){\n        const command = [\n            \"zpopmax\",\n            key\n        ];\n        if (typeof count === \"number\") {\n            command.push(count);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/zpopmin.ts\nvar ZPopMinCommand = class extends Command {\n    constructor([key, count], opts){\n        const command = [\n            \"zpopmin\",\n            key\n        ];\n        if (typeof count === \"number\") {\n            command.push(count);\n        }\n        super(command, opts);\n    }\n};\n// pkg/commands/zrange.ts\nvar ZRangeCommand = class extends Command {\n    constructor([key, min, max, opts], cmdOpts){\n        const command = [\n            \"zrange\",\n            key,\n            min,\n            max\n        ];\n        if (opts?.byScore) {\n            command.push(\"byscore\");\n        }\n        if (opts?.byLex) {\n            command.push(\"bylex\");\n        }\n        if (opts?.rev) {\n            command.push(\"rev\");\n        }\n        if (opts?.count !== void 0 && opts.offset !== void 0) {\n            command.push(\"limit\", opts.offset, opts.count);\n        }\n        if (opts?.withScores) {\n            command.push(\"withscores\");\n        }\n        super(command, cmdOpts);\n    }\n};\n// pkg/commands/zrank.ts\nvar ZRankCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zrank\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zrem.ts\nvar ZRemCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zrem\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zremrangebylex.ts\nvar ZRemRangeByLexCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zremrangebylex\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zremrangebyrank.ts\nvar ZRemRangeByRankCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zremrangebyrank\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zremrangebyscore.ts\nvar ZRemRangeByScoreCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zremrangebyscore\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zrevrank.ts\nvar ZRevRankCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zrevrank\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zscan.ts\nvar ZScanCommand = class extends Command {\n    constructor([key, cursor, opts], cmdOpts){\n        const command = [\n            \"zscan\",\n            key,\n            cursor\n        ];\n        if (opts?.match) {\n            command.push(\"match\", opts.match);\n        }\n        if (typeof opts?.count === \"number\") {\n            command.push(\"count\", opts.count);\n        }\n        super(command, {\n            deserialize: deserializeScanResponse,\n            ...cmdOpts\n        });\n    }\n};\n// pkg/commands/zscore.ts\nvar ZScoreCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zscore\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zunion.ts\nvar ZUnionCommand = class extends Command {\n    constructor([numKeys, keyOrKeys, opts], cmdOpts){\n        const command = [\n            \"zunion\",\n            numKeys\n        ];\n        if (Array.isArray(keyOrKeys)) {\n            command.push(...keyOrKeys);\n        } else {\n            command.push(keyOrKeys);\n        }\n        if (opts) {\n            if (\"weights\" in opts && opts.weights) {\n                command.push(\"weights\", ...opts.weights);\n            } else if (\"weight\" in opts && typeof opts.weight === \"number\") {\n                command.push(\"weights\", opts.weight);\n            }\n            if (\"aggregate\" in opts) {\n                command.push(\"aggregate\", opts.aggregate);\n            }\n            if (opts.withScores) {\n                command.push(\"withscores\");\n            }\n        }\n        super(command, cmdOpts);\n    }\n};\n// pkg/commands/zunionstore.ts\nvar ZUnionStoreCommand = class extends Command {\n    constructor([destination, numKeys, keyOrKeys, opts], cmdOpts){\n        const command = [\n            \"zunionstore\",\n            destination,\n            numKeys\n        ];\n        if (Array.isArray(keyOrKeys)) {\n            command.push(...keyOrKeys);\n        } else {\n            command.push(keyOrKeys);\n        }\n        if (opts) {\n            if (\"weights\" in opts && opts.weights) {\n                command.push(\"weights\", ...opts.weights);\n            } else if (\"weight\" in opts && typeof opts.weight === \"number\") {\n                command.push(\"weights\", opts.weight);\n            }\n            if (\"aggregate\" in opts) {\n                command.push(\"aggregate\", opts.aggregate);\n            }\n        }\n        super(command, cmdOpts);\n    }\n};\n// pkg/commands/zdiffstore.ts\nvar ZDiffStoreCommand = class extends Command {\n    constructor(cmd, opts){\n        super([\n            \"zdiffstore\",\n            ...cmd\n        ], opts);\n    }\n};\n// pkg/commands/zmscore.ts\nvar ZMScoreCommand = class extends Command {\n    constructor(cmd, opts){\n        const [key, members] = cmd;\n        super([\n            \"zmscore\",\n            key,\n            ...members\n        ], opts);\n    }\n};\n// pkg/pipeline.ts\nvar Pipeline = class {\n    constructor(opts){\n        this.exec = async (options)=>{\n            if (this.commands.length === 0) {\n                throw new Error(\"Pipeline is empty\");\n            }\n            const path = this.multiExec ? [\n                \"multi-exec\"\n            ] : [\n                \"pipeline\"\n            ];\n            const res = await this.client.request({\n                path,\n                body: Object.values(this.commands).map((c)=>c.command)\n            });\n            return options?.keepErrors ? res.map(({ error, result }, i)=>{\n                return {\n                    error,\n                    result: this.commands[i].deserialize(result)\n                };\n            }) : res.map(({ error, result }, i)=>{\n                if (error) {\n                    throw new UpstashError(`Command ${i + 1} [ ${this.commands[i].command[0]} ] failed: ${error}`);\n                }\n                return this.commands[i].deserialize(result);\n            });\n        };\n        /**\n   * @see https://redis.io/commands/append\n   */ this.append = (...args)=>this.chain(new AppendCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/bitcount\n   */ this.bitcount = (...args)=>this.chain(new BitCountCommand(args, this.commandOptions));\n        /**\n   * Returns an instance that can be used to execute `BITFIELD` commands on one key.\n   *\n   * @example\n   * ```typescript\n   * redis.set(\"mykey\", 0);\n   * const result = await redis.pipeline()\n   *   .bitfield(\"mykey\")\n   *   .set(\"u4\", 0, 16)\n   *   .incr(\"u4\", \"#1\", 1)\n   *   .exec();\n   * console.log(result); // [[0, 1]]\n   * ```\n   *\n   * @see https://redis.io/commands/bitfield\n   */ this.bitfield = (...args)=>new BitFieldCommand(args, this.client, this.commandOptions, this.chain.bind(this));\n        /**\n   * @see https://redis.io/commands/bitop\n   */ this.bitop = (op, destinationKey, sourceKey, ...sourceKeys)=>this.chain(new BitOpCommand([\n                op,\n                destinationKey,\n                sourceKey,\n                ...sourceKeys\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/bitpos\n   */ this.bitpos = (...args)=>this.chain(new BitPosCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/copy\n   */ this.copy = (...args)=>this.chain(new CopyCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zdiffstore\n   */ this.zdiffstore = (...args)=>this.chain(new ZDiffStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/dbsize\n   */ this.dbsize = ()=>this.chain(new DBSizeCommand(this.commandOptions));\n        /**\n   * @see https://redis.io/commands/decr\n   */ this.decr = (...args)=>this.chain(new DecrCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/decrby\n   */ this.decrby = (...args)=>this.chain(new DecrByCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/del\n   */ this.del = (...args)=>this.chain(new DelCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/echo\n   */ this.echo = (...args)=>this.chain(new EchoCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/eval\n   */ this.eval = (...args)=>this.chain(new EvalCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/evalsha\n   */ this.evalsha = (...args)=>this.chain(new EvalshaCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/exists\n   */ this.exists = (...args)=>this.chain(new ExistsCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/expire\n   */ this.expire = (...args)=>this.chain(new ExpireCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/expireat\n   */ this.expireat = (...args)=>this.chain(new ExpireAtCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/flushall\n   */ this.flushall = (args)=>this.chain(new FlushAllCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/flushdb\n   */ this.flushdb = (...args)=>this.chain(new FlushDBCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/geoadd\n   */ this.geoadd = (...args)=>this.chain(new GeoAddCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/geodist\n   */ this.geodist = (...args)=>this.chain(new GeoDistCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/geopos\n   */ this.geopos = (...args)=>this.chain(new GeoPosCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/geohash\n   */ this.geohash = (...args)=>this.chain(new GeoHashCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/geosearch\n   */ this.geosearch = (...args)=>this.chain(new GeoSearchCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/geosearchstore\n   */ this.geosearchstore = (...args)=>this.chain(new GeoSearchStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/get\n   */ this.get = (...args)=>this.chain(new GetCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/getbit\n   */ this.getbit = (...args)=>this.chain(new GetBitCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/getdel\n   */ this.getdel = (...args)=>this.chain(new GetDelCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/getrange\n   */ this.getrange = (...args)=>this.chain(new GetRangeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/getset\n   */ this.getset = (key, value)=>this.chain(new GetSetCommand([\n                key,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hdel\n   */ this.hdel = (...args)=>this.chain(new HDelCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hexists\n   */ this.hexists = (...args)=>this.chain(new HExistsCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hget\n   */ this.hget = (...args)=>this.chain(new HGetCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hgetall\n   */ this.hgetall = (...args)=>this.chain(new HGetAllCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hincrby\n   */ this.hincrby = (...args)=>this.chain(new HIncrByCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hincrbyfloat\n   */ this.hincrbyfloat = (...args)=>this.chain(new HIncrByFloatCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hkeys\n   */ this.hkeys = (...args)=>this.chain(new HKeysCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hlen\n   */ this.hlen = (...args)=>this.chain(new HLenCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hmget\n   */ this.hmget = (...args)=>this.chain(new HMGetCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hmset\n   */ this.hmset = (key, kv)=>this.chain(new HMSetCommand([\n                key,\n                kv\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hrandfield\n   */ this.hrandfield = (key, count, withValues)=>this.chain(new HRandFieldCommand([\n                key,\n                count,\n                withValues\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hscan\n   */ this.hscan = (...args)=>this.chain(new HScanCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hset\n   */ this.hset = (key, kv)=>this.chain(new HSetCommand([\n                key,\n                kv\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hsetnx\n   */ this.hsetnx = (key, field, value)=>this.chain(new HSetNXCommand([\n                key,\n                field,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hstrlen\n   */ this.hstrlen = (...args)=>this.chain(new HStrLenCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/hvals\n   */ this.hvals = (...args)=>this.chain(new HValsCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/incr\n   */ this.incr = (...args)=>this.chain(new IncrCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/incrby\n   */ this.incrby = (...args)=>this.chain(new IncrByCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/incrbyfloat\n   */ this.incrbyfloat = (...args)=>this.chain(new IncrByFloatCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/keys\n   */ this.keys = (...args)=>this.chain(new KeysCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lindex\n   */ this.lindex = (...args)=>this.chain(new LIndexCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/linsert\n   */ this.linsert = (key, direction, pivot, value)=>this.chain(new LInsertCommand([\n                key,\n                direction,\n                pivot,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/llen\n   */ this.llen = (...args)=>this.chain(new LLenCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lmove\n   */ this.lmove = (...args)=>this.chain(new LMoveCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lpop\n   */ this.lpop = (...args)=>this.chain(new LPopCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lmpop\n   */ this.lmpop = (...args)=>this.chain(new LmPopCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lpos\n   */ this.lpos = (...args)=>this.chain(new LPosCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lpush\n   */ this.lpush = (key, ...elements)=>this.chain(new LPushCommand([\n                key,\n                ...elements\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lpushx\n   */ this.lpushx = (key, ...elements)=>this.chain(new LPushXCommand([\n                key,\n                ...elements\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lrange\n   */ this.lrange = (...args)=>this.chain(new LRangeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lrem\n   */ this.lrem = (key, count, value)=>this.chain(new LRemCommand([\n                key,\n                count,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/lset\n   */ this.lset = (key, index, value)=>this.chain(new LSetCommand([\n                key,\n                index,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/ltrim\n   */ this.ltrim = (...args)=>this.chain(new LTrimCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/mget\n   */ this.mget = (...args)=>this.chain(new MGetCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/mset\n   */ this.mset = (kv)=>this.chain(new MSetCommand([\n                kv\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/msetnx\n   */ this.msetnx = (kv)=>this.chain(new MSetNXCommand([\n                kv\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/persist\n   */ this.persist = (...args)=>this.chain(new PersistCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/pexpire\n   */ this.pexpire = (...args)=>this.chain(new PExpireCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/pexpireat\n   */ this.pexpireat = (...args)=>this.chain(new PExpireAtCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/pfadd\n   */ this.pfadd = (...args)=>this.chain(new PfAddCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/pfcount\n   */ this.pfcount = (...args)=>this.chain(new PfCountCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/pfmerge\n   */ this.pfmerge = (...args)=>this.chain(new PfMergeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/ping\n   */ this.ping = (args)=>this.chain(new PingCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/psetex\n   */ this.psetex = (key, ttl, value)=>this.chain(new PSetEXCommand([\n                key,\n                ttl,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/pttl\n   */ this.pttl = (...args)=>this.chain(new PTtlCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/publish\n   */ this.publish = (...args)=>this.chain(new PublishCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/randomkey\n   */ this.randomkey = ()=>this.chain(new RandomKeyCommand(this.commandOptions));\n        /**\n   * @see https://redis.io/commands/rename\n   */ this.rename = (...args)=>this.chain(new RenameCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/renamenx\n   */ this.renamenx = (...args)=>this.chain(new RenameNXCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/rpop\n   */ this.rpop = (...args)=>this.chain(new RPopCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/rpush\n   */ this.rpush = (key, ...elements)=>this.chain(new RPushCommand([\n                key,\n                ...elements\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/rpushx\n   */ this.rpushx = (key, ...elements)=>this.chain(new RPushXCommand([\n                key,\n                ...elements\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sadd\n   */ this.sadd = (key, member, ...members)=>this.chain(new SAddCommand([\n                key,\n                member,\n                ...members\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/scan\n   */ this.scan = (...args)=>this.chain(new ScanCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/scard\n   */ this.scard = (...args)=>this.chain(new SCardCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/script-exists\n   */ this.scriptExists = (...args)=>this.chain(new ScriptExistsCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/script-flush\n   */ this.scriptFlush = (...args)=>this.chain(new ScriptFlushCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/script-load\n   */ this.scriptLoad = (...args)=>this.chain(new ScriptLoadCommand(args, this.commandOptions));\n        /*)*\n   * @see https://redis.io/commands/sdiff\n   */ this.sdiff = (...args)=>this.chain(new SDiffCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sdiffstore\n   */ this.sdiffstore = (...args)=>this.chain(new SDiffStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/set\n   */ this.set = (key, value, opts)=>this.chain(new SetCommand([\n                key,\n                value,\n                opts\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/setbit\n   */ this.setbit = (...args)=>this.chain(new SetBitCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/setex\n   */ this.setex = (key, ttl, value)=>this.chain(new SetExCommand([\n                key,\n                ttl,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/setnx\n   */ this.setnx = (key, value)=>this.chain(new SetNxCommand([\n                key,\n                value\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/setrange\n   */ this.setrange = (...args)=>this.chain(new SetRangeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sinter\n   */ this.sinter = (...args)=>this.chain(new SInterCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sinterstore\n   */ this.sinterstore = (...args)=>this.chain(new SInterStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sismember\n   */ this.sismember = (key, member)=>this.chain(new SIsMemberCommand([\n                key,\n                member\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/smembers\n   */ this.smembers = (...args)=>this.chain(new SMembersCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/smismember\n   */ this.smismember = (key, members)=>this.chain(new SMIsMemberCommand([\n                key,\n                members\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/smove\n   */ this.smove = (source, destination, member)=>this.chain(new SMoveCommand([\n                source,\n                destination,\n                member\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/spop\n   */ this.spop = (...args)=>this.chain(new SPopCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/srandmember\n   */ this.srandmember = (...args)=>this.chain(new SRandMemberCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/srem\n   */ this.srem = (key, ...members)=>this.chain(new SRemCommand([\n                key,\n                ...members\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sscan\n   */ this.sscan = (...args)=>this.chain(new SScanCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/strlen\n   */ this.strlen = (...args)=>this.chain(new StrLenCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sunion\n   */ this.sunion = (...args)=>this.chain(new SUnionCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/sunionstore\n   */ this.sunionstore = (...args)=>this.chain(new SUnionStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/time\n   */ this.time = ()=>this.chain(new TimeCommand(this.commandOptions));\n        /**\n   * @see https://redis.io/commands/touch\n   */ this.touch = (...args)=>this.chain(new TouchCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/ttl\n   */ this.ttl = (...args)=>this.chain(new TtlCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/type\n   */ this.type = (...args)=>this.chain(new TypeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/unlink\n   */ this.unlink = (...args)=>this.chain(new UnlinkCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zadd\n   */ this.zadd = (...args)=>{\n            if (\"score\" in args[1]) {\n                return this.chain(new ZAddCommand([\n                    args[0],\n                    args[1],\n                    ...args.slice(2)\n                ], this.commandOptions));\n            }\n            return this.chain(new ZAddCommand([\n                args[0],\n                args[1],\n                ...args.slice(2)\n            ], this.commandOptions));\n        };\n        /**\n   * @see https://redis.io/commands/xadd\n   */ this.xadd = (...args)=>this.chain(new XAddCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xack\n   */ this.xack = (...args)=>this.chain(new XAckCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xdel\n   */ this.xdel = (...args)=>this.chain(new XDelCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xgroup\n   */ this.xgroup = (...args)=>this.chain(new XGroupCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xread\n   */ this.xread = (...args)=>this.chain(new XReadCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xreadgroup\n   */ this.xreadgroup = (...args)=>this.chain(new XReadGroupCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xinfo\n   */ this.xinfo = (...args)=>this.chain(new XInfoCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xlen\n   */ this.xlen = (...args)=>this.chain(new XLenCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xpending\n   */ this.xpending = (...args)=>this.chain(new XPendingCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xclaim\n   */ this.xclaim = (...args)=>this.chain(new XClaimCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xautoclaim\n   */ this.xautoclaim = (...args)=>this.chain(new XAutoClaim(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xtrim\n   */ this.xtrim = (...args)=>this.chain(new XTrimCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xrange\n   */ this.xrange = (...args)=>this.chain(new XRangeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/xrevrange\n   */ this.xrevrange = (...args)=>this.chain(new XRevRangeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zcard\n   */ this.zcard = (...args)=>this.chain(new ZCardCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zcount\n   */ this.zcount = (...args)=>this.chain(new ZCountCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zincrby\n   */ this.zincrby = (key, increment, member)=>this.chain(new ZIncrByCommand([\n                key,\n                increment,\n                member\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zinterstore\n   */ this.zinterstore = (...args)=>this.chain(new ZInterStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zlexcount\n   */ this.zlexcount = (...args)=>this.chain(new ZLexCountCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zmscore\n   */ this.zmscore = (...args)=>this.chain(new ZMScoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zpopmax\n   */ this.zpopmax = (...args)=>this.chain(new ZPopMaxCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zpopmin\n   */ this.zpopmin = (...args)=>this.chain(new ZPopMinCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zrange\n   */ this.zrange = (...args)=>this.chain(new ZRangeCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zrank\n   */ this.zrank = (key, member)=>this.chain(new ZRankCommand([\n                key,\n                member\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zrem\n   */ this.zrem = (key, ...members)=>this.chain(new ZRemCommand([\n                key,\n                ...members\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zremrangebylex\n   */ this.zremrangebylex = (...args)=>this.chain(new ZRemRangeByLexCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zremrangebyrank\n   */ this.zremrangebyrank = (...args)=>this.chain(new ZRemRangeByRankCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zremrangebyscore\n   */ this.zremrangebyscore = (...args)=>this.chain(new ZRemRangeByScoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zrevrank\n   */ this.zrevrank = (key, member)=>this.chain(new ZRevRankCommand([\n                key,\n                member\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zscan\n   */ this.zscan = (...args)=>this.chain(new ZScanCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zscore\n   */ this.zscore = (key, member)=>this.chain(new ZScoreCommand([\n                key,\n                member\n            ], this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zunionstore\n   */ this.zunionstore = (...args)=>this.chain(new ZUnionStoreCommand(args, this.commandOptions));\n        /**\n   * @see https://redis.io/commands/zunion\n   */ this.zunion = (...args)=>this.chain(new ZUnionCommand(args, this.commandOptions));\n        this.client = opts.client;\n        this.commands = [];\n        this.commandOptions = opts.commandOptions;\n        this.multiExec = opts.multiExec ?? false;\n        if (this.commandOptions?.latencyLogging) {\n            const originalExec = this.exec.bind(this);\n            this.exec = async (options)=>{\n                const start = performance.now();\n                const result = await (options ? originalExec(options) : originalExec());\n                const end = performance.now();\n                const loggerResult = (end - start).toFixed(2);\n                console.log(`Latency for \\x1B[38;2;19;185;39m${this.multiExec ? [\n                    \"MULTI-EXEC\"\n                ] : [\n                    \"PIPELINE\"\n                ].toString().toUpperCase()}\\x1B[0m: \\x1B[38;2;0;255;255m${loggerResult} ms\\x1B[0m`);\n                return result;\n            };\n        }\n    }\n    /**\n   * Returns the length of pipeline before the execution\n   */ length() {\n        return this.commands.length;\n    }\n    /**\n   * Pushes a command into the pipeline and returns a chainable instance of the\n   * pipeline\n   */ chain(command) {\n        this.commands.push(command);\n        return this;\n    }\n    /**\n   * @see https://redis.io/commands/?group=json\n   */ get json() {\n        return {\n            /**\n       * @see https://redis.io/commands/json.arrappend\n       */ arrappend: (...args)=>this.chain(new JsonArrAppendCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.arrindex\n       */ arrindex: (...args)=>this.chain(new JsonArrIndexCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.arrinsert\n       */ arrinsert: (...args)=>this.chain(new JsonArrInsertCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.arrlen\n       */ arrlen: (...args)=>this.chain(new JsonArrLenCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.arrpop\n       */ arrpop: (...args)=>this.chain(new JsonArrPopCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.arrtrim\n       */ arrtrim: (...args)=>this.chain(new JsonArrTrimCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.clear\n       */ clear: (...args)=>this.chain(new JsonClearCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.del\n       */ del: (...args)=>this.chain(new JsonDelCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.forget\n       */ forget: (...args)=>this.chain(new JsonForgetCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.get\n       */ get: (...args)=>this.chain(new JsonGetCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.mget\n       */ mget: (...args)=>this.chain(new JsonMGetCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.mset\n       */ mset: (...args)=>this.chain(new JsonMSetCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.numincrby\n       */ numincrby: (...args)=>this.chain(new JsonNumIncrByCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.nummultby\n       */ nummultby: (...args)=>this.chain(new JsonNumMultByCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.objkeys\n       */ objkeys: (...args)=>this.chain(new JsonObjKeysCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.objlen\n       */ objlen: (...args)=>this.chain(new JsonObjLenCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.resp\n       */ resp: (...args)=>this.chain(new JsonRespCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.set\n       */ set: (...args)=>this.chain(new JsonSetCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.strappend\n       */ strappend: (...args)=>this.chain(new JsonStrAppendCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.strlen\n       */ strlen: (...args)=>this.chain(new JsonStrLenCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.toggle\n       */ toggle: (...args)=>this.chain(new JsonToggleCommand(args, this.commandOptions)),\n            /**\n       * @see https://redis.io/commands/json.type\n       */ type: (...args)=>this.chain(new JsonTypeCommand(args, this.commandOptions))\n        };\n    }\n};\n// pkg/auto-pipeline.ts\nfunction createAutoPipelineProxy(_redis, json) {\n    const redis = _redis;\n    if (!redis.autoPipelineExecutor) {\n        redis.autoPipelineExecutor = new AutoPipelineExecutor(redis);\n    }\n    return new Proxy(redis, {\n        get: (redis2, command)=>{\n            if (command === \"pipelineCounter\") {\n                return redis2.autoPipelineExecutor.pipelineCounter;\n            }\n            if (command === \"json\") {\n                return createAutoPipelineProxy(redis2, true);\n            }\n            const commandInRedisButNotPipeline = command in redis2 && !(command in redis2.autoPipelineExecutor.pipeline);\n            if (commandInRedisButNotPipeline) {\n                return redis2[command];\n            }\n            const isFunction = json ? typeof redis2.autoPipelineExecutor.pipeline.json[command] === \"function\" : typeof redis2.autoPipelineExecutor.pipeline[command] === \"function\";\n            if (isFunction) {\n                return (...args)=>{\n                    return redis2.autoPipelineExecutor.withAutoPipeline((pipeline)=>{\n                        if (json) {\n                            pipeline.json[command](...args);\n                        } else {\n                            pipeline[command](...args);\n                        }\n                    });\n                };\n            }\n            return redis2.autoPipelineExecutor.pipeline[command];\n        }\n    });\n}\nvar AutoPipelineExecutor = class {\n    // to keep track of how many times a pipeline was executed\n    constructor(redis){\n        this.pipelinePromises = /* @__PURE__ */ new WeakMap();\n        this.activePipeline = null;\n        this.indexInCurrentPipeline = 0;\n        // only to make sure that proxy can work\n        this.pipelineCounter = 0;\n        this.redis = redis;\n        this.pipeline = redis.pipeline();\n    }\n    async withAutoPipeline(executeWithPipeline) {\n        const pipeline = this.activePipeline ?? this.redis.pipeline();\n        if (!this.activePipeline) {\n            this.activePipeline = pipeline;\n            this.indexInCurrentPipeline = 0;\n        }\n        const index = this.indexInCurrentPipeline++;\n        executeWithPipeline(pipeline);\n        const pipelineDone = this.deferExecution().then(()=>{\n            if (!this.pipelinePromises.has(pipeline)) {\n                const pipelinePromise = pipeline.exec({\n                    keepErrors: true\n                });\n                this.pipelineCounter += 1;\n                this.pipelinePromises.set(pipeline, pipelinePromise);\n                this.activePipeline = null;\n            }\n            return this.pipelinePromises.get(pipeline);\n        });\n        const results = await pipelineDone;\n        const commandResult = results[index];\n        if (commandResult.error) {\n            throw new UpstashError(`Command failed: ${commandResult.error}`);\n        }\n        return commandResult.result;\n    }\n    async deferExecution() {\n        await Promise.resolve();\n        await Promise.resolve();\n    }\n};\n// pkg/script.ts\n\n\nvar Script = class {\n    constructor(redis, script){\n        this.redis = redis;\n        this.sha1 = this.digest(script);\n        this.script = script;\n    }\n    /**\n   * Send an `EVAL` command to redis.\n   */ async eval(keys, args) {\n        return await this.redis.eval(this.script, keys, args);\n    }\n    /**\n   * Calculates the sha1 hash of the script and then calls `EVALSHA`.\n   */ async evalsha(keys, args) {\n        return await this.redis.evalsha(this.sha1, keys, args);\n    }\n    /**\n   * Optimistically try to run `EVALSHA` first.\n   * If the script is not loaded in redis, it will fall back and try again with `EVAL`.\n   *\n   * Following calls will be able to use the cached script\n   */ async exec(keys, args) {\n        const res = await this.redis.evalsha(this.sha1, keys, args).catch(async (error)=>{\n            if (error instanceof Error && error.message.toLowerCase().includes(\"noscript\")) {\n                return await this.redis.eval(this.script, keys, args);\n            }\n            throw error;\n        });\n        return res;\n    }\n    /**\n   * Compute the sha1 hash of the script and return its hex representation.\n   */ digest(s) {\n        return crypto_js_enc_hex_js__WEBPACK_IMPORTED_MODULE_0___default().stringify(crypto_js_sha1_js__WEBPACK_IMPORTED_MODULE_1___default()(s));\n    }\n};\n// pkg/redis.ts\nvar Redis = class {\n    /**\n   * Create a new redis client\n   *\n   * @example\n   * ```typescript\n   * const redis = new Redis({\n   *  url: \"<UPSTASH_REDIS_REST_URL>\",\n   *  token: \"<UPSTASH_REDIS_REST_TOKEN>\",\n   * });\n   * ```\n   */ constructor(client, opts){\n        /**\n   * Wrap a new middleware around the HTTP client.\n   */ this.use = (middleware)=>{\n            const makeRequest = this.client.request.bind(this.client);\n            this.client.request = (req)=>middleware(req, makeRequest);\n        };\n        /**\n   * Technically this is not private, we can hide it from intellisense by doing this\n   */ this.addTelemetry = (telemetry)=>{\n            if (!this.enableTelemetry) {\n                return;\n            }\n            try {\n                this.client.mergeTelemetry(telemetry);\n            } catch  {}\n        };\n        /**\n   * Create a new pipeline that allows you to send requests in bulk.\n   *\n   * @see {@link Pipeline}\n   */ this.pipeline = ()=>new Pipeline({\n                client: this.client,\n                commandOptions: this.opts,\n                multiExec: false\n            });\n        this.autoPipeline = ()=>{\n            return createAutoPipelineProxy(this);\n        };\n        /**\n   * Create a new transaction to allow executing multiple steps atomically.\n   *\n   * All the commands in a transaction are serialized and executed sequentially. A request sent by\n   * another client will never be served in the middle of the execution of a Redis Transaction. This\n   * guarantees that the commands are executed as a single isolated operation.\n   *\n   * @see {@link Pipeline}\n   */ this.multi = ()=>new Pipeline({\n                client: this.client,\n                commandOptions: this.opts,\n                multiExec: true\n            });\n        /**\n   * Returns an instance that can be used to execute `BITFIELD` commands on one key.\n   *\n   * @example\n   * ```typescript\n   * redis.set(\"mykey\", 0);\n   * const result = await redis.bitfield(\"mykey\")\n   *   .set(\"u4\", 0, 16)\n   *   .incr(\"u4\", \"#1\", 1)\n   *   .exec();\n   * console.log(result); // [0, 1]\n   * ```\n   *\n   * @see https://redis.io/commands/bitfield\n   */ this.bitfield = (...args)=>new BitFieldCommand(args, this.client, this.opts);\n        /**\n   * @see https://redis.io/commands/append\n   */ this.append = (...args)=>new AppendCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/bitcount\n   */ this.bitcount = (...args)=>new BitCountCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/bitop\n   */ this.bitop = (op, destinationKey, sourceKey, ...sourceKeys)=>new BitOpCommand([\n                op,\n                destinationKey,\n                sourceKey,\n                ...sourceKeys\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/bitpos\n   */ this.bitpos = (...args)=>new BitPosCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/copy\n   */ this.copy = (...args)=>new CopyCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/dbsize\n   */ this.dbsize = ()=>new DBSizeCommand(this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/decr\n   */ this.decr = (...args)=>new DecrCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/decrby\n   */ this.decrby = (...args)=>new DecrByCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/del\n   */ this.del = (...args)=>new DelCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/echo\n   */ this.echo = (...args)=>new EchoCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/eval\n   */ this.eval = (...args)=>new EvalCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/evalsha\n   */ this.evalsha = (...args)=>new EvalshaCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/exists\n   */ this.exists = (...args)=>new ExistsCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/expire\n   */ this.expire = (...args)=>new ExpireCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/expireat\n   */ this.expireat = (...args)=>new ExpireAtCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/flushall\n   */ this.flushall = (args)=>new FlushAllCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/flushdb\n   */ this.flushdb = (...args)=>new FlushDBCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/geoadd\n   */ this.geoadd = (...args)=>new GeoAddCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/geopos\n   */ this.geopos = (...args)=>new GeoPosCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/geodist\n   */ this.geodist = (...args)=>new GeoDistCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/geohash\n   */ this.geohash = (...args)=>new GeoHashCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/geosearch\n   */ this.geosearch = (...args)=>new GeoSearchCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/geosearchstore\n   */ this.geosearchstore = (...args)=>new GeoSearchStoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/get\n   */ this.get = (...args)=>new GetCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/getbit\n   */ this.getbit = (...args)=>new GetBitCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/getdel\n   */ this.getdel = (...args)=>new GetDelCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/getrange\n   */ this.getrange = (...args)=>new GetRangeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/getset\n   */ this.getset = (key, value)=>new GetSetCommand([\n                key,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hdel\n   */ this.hdel = (...args)=>new HDelCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hexists\n   */ this.hexists = (...args)=>new HExistsCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hget\n   */ this.hget = (...args)=>new HGetCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hgetall\n   */ this.hgetall = (...args)=>new HGetAllCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hincrby\n   */ this.hincrby = (...args)=>new HIncrByCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hincrbyfloat\n   */ this.hincrbyfloat = (...args)=>new HIncrByFloatCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hkeys\n   */ this.hkeys = (...args)=>new HKeysCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hlen\n   */ this.hlen = (...args)=>new HLenCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hmget\n   */ this.hmget = (...args)=>new HMGetCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hmset\n   */ this.hmset = (key, kv)=>new HMSetCommand([\n                key,\n                kv\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hrandfield\n   */ this.hrandfield = (key, count, withValues)=>new HRandFieldCommand([\n                key,\n                count,\n                withValues\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hscan\n   */ this.hscan = (...args)=>new HScanCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hset\n   */ this.hset = (key, kv)=>new HSetCommand([\n                key,\n                kv\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hsetnx\n   */ this.hsetnx = (key, field, value)=>new HSetNXCommand([\n                key,\n                field,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hstrlen\n   */ this.hstrlen = (...args)=>new HStrLenCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/hvals\n   */ this.hvals = (...args)=>new HValsCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/incr\n   */ this.incr = (...args)=>new IncrCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/incrby\n   */ this.incrby = (...args)=>new IncrByCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/incrbyfloat\n   */ this.incrbyfloat = (...args)=>new IncrByFloatCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/keys\n   */ this.keys = (...args)=>new KeysCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lindex\n   */ this.lindex = (...args)=>new LIndexCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/linsert\n   */ this.linsert = (key, direction, pivot, value)=>new LInsertCommand([\n                key,\n                direction,\n                pivot,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/llen\n   */ this.llen = (...args)=>new LLenCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lmove\n   */ this.lmove = (...args)=>new LMoveCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lpop\n   */ this.lpop = (...args)=>new LPopCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lmpop\n   */ this.lmpop = (...args)=>new LmPopCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lpos\n   */ this.lpos = (...args)=>new LPosCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lpush\n   */ this.lpush = (key, ...elements)=>new LPushCommand([\n                key,\n                ...elements\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lpushx\n   */ this.lpushx = (key, ...elements)=>new LPushXCommand([\n                key,\n                ...elements\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lrange\n   */ this.lrange = (...args)=>new LRangeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lrem\n   */ this.lrem = (key, count, value)=>new LRemCommand([\n                key,\n                count,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/lset\n   */ this.lset = (key, index, value)=>new LSetCommand([\n                key,\n                index,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/ltrim\n   */ this.ltrim = (...args)=>new LTrimCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/mget\n   */ this.mget = (...args)=>new MGetCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/mset\n   */ this.mset = (kv)=>new MSetCommand([\n                kv\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/msetnx\n   */ this.msetnx = (kv)=>new MSetNXCommand([\n                kv\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/persist\n   */ this.persist = (...args)=>new PersistCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/pexpire\n   */ this.pexpire = (...args)=>new PExpireCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/pexpireat\n   */ this.pexpireat = (...args)=>new PExpireAtCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/pfadd\n   */ this.pfadd = (...args)=>new PfAddCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/pfcount\n   */ this.pfcount = (...args)=>new PfCountCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/pfmerge\n   */ this.pfmerge = (...args)=>new PfMergeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/ping\n   */ this.ping = (args)=>new PingCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/psetex\n   */ this.psetex = (key, ttl, value)=>new PSetEXCommand([\n                key,\n                ttl,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/pttl\n   */ this.pttl = (...args)=>new PTtlCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/publish\n   */ this.publish = (...args)=>new PublishCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/randomkey\n   */ this.randomkey = ()=>new RandomKeyCommand().exec(this.client);\n        /**\n   * @see https://redis.io/commands/rename\n   */ this.rename = (...args)=>new RenameCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/renamenx\n   */ this.renamenx = (...args)=>new RenameNXCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/rpop\n   */ this.rpop = (...args)=>new RPopCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/rpush\n   */ this.rpush = (key, ...elements)=>new RPushCommand([\n                key,\n                ...elements\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/rpushx\n   */ this.rpushx = (key, ...elements)=>new RPushXCommand([\n                key,\n                ...elements\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sadd\n   */ this.sadd = (key, member, ...members)=>new SAddCommand([\n                key,\n                member,\n                ...members\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/scan\n   */ this.scan = (...args)=>new ScanCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/scard\n   */ this.scard = (...args)=>new SCardCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/script-exists\n   */ this.scriptExists = (...args)=>new ScriptExistsCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/script-flush\n   */ this.scriptFlush = (...args)=>new ScriptFlushCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/script-load\n   */ this.scriptLoad = (...args)=>new ScriptLoadCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sdiff\n   */ this.sdiff = (...args)=>new SDiffCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sdiffstore\n   */ this.sdiffstore = (...args)=>new SDiffStoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/set\n   */ this.set = (key, value, opts)=>new SetCommand([\n                key,\n                value,\n                opts\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/setbit\n   */ this.setbit = (...args)=>new SetBitCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/setex\n   */ this.setex = (key, ttl, value)=>new SetExCommand([\n                key,\n                ttl,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/setnx\n   */ this.setnx = (key, value)=>new SetNxCommand([\n                key,\n                value\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/setrange\n   */ this.setrange = (...args)=>new SetRangeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sinter\n   */ this.sinter = (...args)=>new SInterCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sinterstore\n   */ this.sinterstore = (...args)=>new SInterStoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sismember\n   */ this.sismember = (key, member)=>new SIsMemberCommand([\n                key,\n                member\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/smismember\n   */ this.smismember = (key, members)=>new SMIsMemberCommand([\n                key,\n                members\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/smembers\n   */ this.smembers = (...args)=>new SMembersCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/smove\n   */ this.smove = (source, destination, member)=>new SMoveCommand([\n                source,\n                destination,\n                member\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/spop\n   */ this.spop = (...args)=>new SPopCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/srandmember\n   */ this.srandmember = (...args)=>new SRandMemberCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/srem\n   */ this.srem = (key, ...members)=>new SRemCommand([\n                key,\n                ...members\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sscan\n   */ this.sscan = (...args)=>new SScanCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/strlen\n   */ this.strlen = (...args)=>new StrLenCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sunion\n   */ this.sunion = (...args)=>new SUnionCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/sunionstore\n   */ this.sunionstore = (...args)=>new SUnionStoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/time\n   */ this.time = ()=>new TimeCommand().exec(this.client);\n        /**\n   * @see https://redis.io/commands/touch\n   */ this.touch = (...args)=>new TouchCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/ttl\n   */ this.ttl = (...args)=>new TtlCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/type\n   */ this.type = (...args)=>new TypeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/unlink\n   */ this.unlink = (...args)=>new UnlinkCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xadd\n   */ this.xadd = (...args)=>new XAddCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xack\n   */ this.xack = (...args)=>new XAckCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xdel\n   */ this.xdel = (...args)=>new XDelCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xgroup\n   */ this.xgroup = (...args)=>new XGroupCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xread\n   */ this.xread = (...args)=>new XReadCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xreadgroup\n   */ this.xreadgroup = (...args)=>new XReadGroupCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xinfo\n   */ this.xinfo = (...args)=>new XInfoCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xlen\n   */ this.xlen = (...args)=>new XLenCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xpending\n   */ this.xpending = (...args)=>new XPendingCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xclaim\n   */ this.xclaim = (...args)=>new XClaimCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xautoclaim\n   */ this.xautoclaim = (...args)=>new XAutoClaim(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xtrim\n   */ this.xtrim = (...args)=>new XTrimCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xrange\n   */ this.xrange = (...args)=>new XRangeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/xrevrange\n   */ this.xrevrange = (...args)=>new XRevRangeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zadd\n   */ this.zadd = (...args)=>{\n            if (\"score\" in args[1]) {\n                return new ZAddCommand([\n                    args[0],\n                    args[1],\n                    ...args.slice(2)\n                ], this.opts).exec(this.client);\n            }\n            return new ZAddCommand([\n                args[0],\n                args[1],\n                ...args.slice(2)\n            ], this.opts).exec(this.client);\n        };\n        /**\n   * @see https://redis.io/commands/zcard\n   */ this.zcard = (...args)=>new ZCardCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zcount\n   */ this.zcount = (...args)=>new ZCountCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zdiffstore\n   */ this.zdiffstore = (...args)=>new ZDiffStoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zincrby\n   */ this.zincrby = (key, increment, member)=>new ZIncrByCommand([\n                key,\n                increment,\n                member\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zinterstore\n   */ this.zinterstore = (...args)=>new ZInterStoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zlexcount\n   */ this.zlexcount = (...args)=>new ZLexCountCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zmscore\n   */ this.zmscore = (...args)=>new ZMScoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zpopmax\n   */ this.zpopmax = (...args)=>new ZPopMaxCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zpopmin\n   */ this.zpopmin = (...args)=>new ZPopMinCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zrange\n   */ this.zrange = (...args)=>new ZRangeCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zrank\n   */ this.zrank = (key, member)=>new ZRankCommand([\n                key,\n                member\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zrem\n   */ this.zrem = (key, ...members)=>new ZRemCommand([\n                key,\n                ...members\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zremrangebylex\n   */ this.zremrangebylex = (...args)=>new ZRemRangeByLexCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zremrangebyrank\n   */ this.zremrangebyrank = (...args)=>new ZRemRangeByRankCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zremrangebyscore\n   */ this.zremrangebyscore = (...args)=>new ZRemRangeByScoreCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zrevrank\n   */ this.zrevrank = (key, member)=>new ZRevRankCommand([\n                key,\n                member\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zscan\n   */ this.zscan = (...args)=>new ZScanCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zscore\n   */ this.zscore = (key, member)=>new ZScoreCommand([\n                key,\n                member\n            ], this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zunion\n   */ this.zunion = (...args)=>new ZUnionCommand(args, this.opts).exec(this.client);\n        /**\n   * @see https://redis.io/commands/zunionstore\n   */ this.zunionstore = (...args)=>new ZUnionStoreCommand(args, this.opts).exec(this.client);\n        this.client = client;\n        this.opts = opts;\n        this.enableTelemetry = opts?.enableTelemetry ?? true;\n        if (opts?.readYourWrites === false) {\n            this.client.readYourWrites = false;\n        }\n        this.enableAutoPipelining = opts?.enableAutoPipelining ?? true;\n    }\n    get readYourWritesSyncToken() {\n        return this.client.upstashSyncToken;\n    }\n    set readYourWritesSyncToken(session) {\n        this.client.upstashSyncToken = session;\n    }\n    get json() {\n        return {\n            /**\n       * @see https://redis.io/commands/json.arrappend\n       */ arrappend: (...args)=>new JsonArrAppendCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.arrindex\n       */ arrindex: (...args)=>new JsonArrIndexCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.arrinsert\n       */ arrinsert: (...args)=>new JsonArrInsertCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.arrlen\n       */ arrlen: (...args)=>new JsonArrLenCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.arrpop\n       */ arrpop: (...args)=>new JsonArrPopCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.arrtrim\n       */ arrtrim: (...args)=>new JsonArrTrimCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.clear\n       */ clear: (...args)=>new JsonClearCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.del\n       */ del: (...args)=>new JsonDelCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.forget\n       */ forget: (...args)=>new JsonForgetCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.get\n       */ get: (...args)=>new JsonGetCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.mget\n       */ mget: (...args)=>new JsonMGetCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.mset\n       */ mset: (...args)=>new JsonMSetCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.numincrby\n       */ numincrby: (...args)=>new JsonNumIncrByCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.nummultby\n       */ nummultby: (...args)=>new JsonNumMultByCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.objkeys\n       */ objkeys: (...args)=>new JsonObjKeysCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.objlen\n       */ objlen: (...args)=>new JsonObjLenCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.resp\n       */ resp: (...args)=>new JsonRespCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.set\n       */ set: (...args)=>new JsonSetCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.strappend\n       */ strappend: (...args)=>new JsonStrAppendCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.strlen\n       */ strlen: (...args)=>new JsonStrLenCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.toggle\n       */ toggle: (...args)=>new JsonToggleCommand(args, this.opts).exec(this.client),\n            /**\n       * @see https://redis.io/commands/json.type\n       */ type: (...args)=>new JsonTypeCommand(args, this.opts).exec(this.client)\n        };\n    }\n    createScript(script) {\n        return new Script(this, script);\n    }\n};\n// version.ts\nvar VERSION = \"v1.34.3\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@upstash/redis/chunk-FV6JMGNF.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@upstash/redis/nodejs.mjs":
/*!************************************************!*\
  !*** ./node_modules/@upstash/redis/nodejs.mjs ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Redis: () => (/* binding */ Redis2),\n/* harmony export */   errors: () => (/* reexport safe */ _chunk_FV6JMGNF_mjs__WEBPACK_IMPORTED_MODULE_0__.error_exports)\n/* harmony export */ });\n/* harmony import */ var _chunk_FV6JMGNF_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-FV6JMGNF.mjs */ \"(rsc)/./node_modules/@upstash/redis/chunk-FV6JMGNF.mjs\");\n\n// platforms/nodejs.ts\nif (typeof atob === \"undefined\") {\n    global.atob = (b64)=>Buffer.from(b64, \"base64\").toString(\"utf8\");\n}\nvar Redis2 = class _Redis extends _chunk_FV6JMGNF_mjs__WEBPACK_IMPORTED_MODULE_0__.Redis {\n    /**\n   * Create a new redis client by providing a custom `Requester` implementation\n   *\n   * @example\n   * ```ts\n   *\n   * import { UpstashRequest, Requester, UpstashResponse, Redis } from \"@upstash/redis\"\n   *\n   *  const requester: Requester = {\n   *    request: <TResult>(req: UpstashRequest): Promise<UpstashResponse<TResult>> => {\n   *      // ...\n   *    }\n   *  }\n   *\n   * const redis = new Redis(requester)\n   * ```\n   */ constructor(configOrRequester){\n        if (\"request\" in configOrRequester) {\n            super(configOrRequester);\n            return;\n        }\n        if (!configOrRequester.url) {\n            console.warn(`[Upstash Redis] The 'url' property is missing or undefined in your Redis config.`);\n        } else if (configOrRequester.url.startsWith(\" \") || configOrRequester.url.endsWith(\" \") || /\\r|\\n/.test(configOrRequester.url)) {\n            console.warn(\"[Upstash Redis] The redis url contains whitespace or newline, which can cause errors!\");\n        }\n        if (!configOrRequester.token) {\n            console.warn(`[Upstash Redis] The 'token' property is missing or undefined in your Redis config.`);\n        } else if (configOrRequester.token.startsWith(\" \") || configOrRequester.token.endsWith(\" \") || /\\r|\\n/.test(configOrRequester.token)) {\n            console.warn(\"[Upstash Redis] The redis token contains whitespace or newline, which can cause errors!\");\n        }\n        const client = new _chunk_FV6JMGNF_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpClient({\n            baseUrl: configOrRequester.url,\n            retry: configOrRequester.retry,\n            headers: {\n                authorization: `Bearer ${configOrRequester.token}`\n            },\n            agent: configOrRequester.agent,\n            responseEncoding: configOrRequester.responseEncoding,\n            cache: configOrRequester.cache ?? \"no-store\",\n            signal: configOrRequester.signal,\n            keepAlive: configOrRequester.keepAlive,\n            readYourWrites: configOrRequester.readYourWrites\n        });\n        super(client, {\n            automaticDeserialization: configOrRequester.automaticDeserialization,\n            enableTelemetry: !process.env.UPSTASH_DISABLE_TELEMETRY,\n            latencyLogging: configOrRequester.latencyLogging,\n            enableAutoPipelining: configOrRequester.enableAutoPipelining\n        });\n        this.addTelemetry({\n            runtime: // @ts-expect-error to silence compiler\n            typeof EdgeRuntime === \"string\" ? \"edge-light\" : `node@${process.version}`,\n            platform: process.env.VERCEL ? \"vercel\" : process.env.AWS_REGION ? \"aws\" : \"unknown\",\n            sdk: `@upstash/redis@${_chunk_FV6JMGNF_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION}`\n        });\n        if (this.enableAutoPipelining) {\n            return this.autoPipeline();\n        }\n    }\n    /**\n   * Create a new Upstash Redis instance from environment variables.\n   *\n   * Use this to automatically load connection secrets from your environment\n   * variables. For instance when using the Vercel integration.\n   *\n   * This tries to load `UPSTASH_REDIS_REST_URL` and `UPSTASH_REDIS_REST_TOKEN` from\n   * your environment using `process.env`.\n   */ static fromEnv(config) {\n        if (process.env === void 0) {\n            throw new TypeError('[Upstash Redis] Unable to get environment variables, `process.env` is undefined. If you are deploying to cloudflare, please import from \"@upstash/redis/cloudflare\" instead');\n        }\n        const url = process.env.UPSTASH_REDIS_REST_URL || process.env.KV_REST_API_URL;\n        if (!url) {\n            console.warn(\"[Upstash Redis] Unable to find environment variable: `UPSTASH_REDIS_REST_URL`\");\n        }\n        const token = process.env.UPSTASH_REDIS_REST_TOKEN || process.env.KV_REST_API_TOKEN;\n        if (!token) {\n            console.warn(\"[Upstash Redis] Unable to find environment variable: `UPSTASH_REDIS_REST_TOKEN`\");\n        }\n        return new _Redis({\n            ...config,\n            url,\n            token\n        });\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@upstash/redis/nodejs.mjs\n");

/***/ })

};
;